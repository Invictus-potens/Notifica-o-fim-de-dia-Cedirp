#!/usr/bin/env node

/**
 * Teste para verificar se o frontend est√° funcionando corretamente
 */

const axios = require('axios');

async function testFrontendDebug() {
  try {
    console.log('üß™ ===========================================');
    console.log('   TESTANDO FRONTEND DEBUG');
    console.log('===========================================');
    
    const baseUrl = 'http://localhost:3000';
    
    // 1. Verificar se servidor est√° rodando
    console.log('\n1Ô∏è‚É£ Verificando servidor...');
    try {
      await axios.get(`${baseUrl}/health?quick=true`, { timeout: 5000 });
      console.log('‚úÖ Servidor est√° rodando');
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° respondendo');
      return;
    }
    
    // 2. Testar endpoint de pacientes
    console.log('\n2Ô∏è‚É£ Testando endpoint de pacientes...');
    const patientsResponse = await axios.get(`${baseUrl}/api/patients`);
    console.log(`‚úÖ Endpoint de pacientes funcionando: ${patientsResponse.data.data.length} pacientes`);
    
    // 3. Testar endpoint de hist√≥rico de mensagens
    console.log('\n3Ô∏è‚É£ Testando endpoint de hist√≥rico...');
    const historyResponse = await axios.get(`${baseUrl}/api/messages/history`);
    console.log(`‚úÖ Endpoint de hist√≥rico funcionando: ${historyResponse.data.data.length} mensagens`);
    
    // 4. Testar se a p√°gina principal est√° acess√≠vel
    console.log('\n4Ô∏è‚É£ Testando p√°gina principal...');
    const pageResponse = await axios.get(`${baseUrl}/`, { timeout: 5000 });
    console.log(`‚úÖ P√°gina principal acess√≠vel: Status ${pageResponse.status}`);
    
    // 5. Verificar se h√° JavaScript na p√°gina
    if (pageResponse.data.includes('app.js')) {
      console.log('‚úÖ app.js est√° sendo carregado na p√°gina');
    } else {
      console.log('‚ùå app.js N√ÉO est√° sendo carregado na p√°gina');
    }
    
    // 6. Verificar se h√° logs de debug na p√°gina
    if (pageResponse.data.includes('DEBUG')) {
      console.log('‚úÖ Logs de DEBUG est√£o no c√≥digo da p√°gina');
    } else {
      console.log('‚ùå Logs de DEBUG N√ÉO est√£o no c√≥digo da p√°gina');
    }
    
    console.log('\nüéØ ===========================================');
    console.log('   TESTE CONCLU√çDO');
    console.log('===========================================');
    console.log('üí° Agora abra o navegador em http://localhost:3000');
    console.log('üí° Abra o Console (F12) e recarregue a p√°gina');
    console.log('üí° Procure pelos logs que come√ßam com üö® DEBUG');
    
  } catch (error) {
    console.error('\n‚ùå ===========================================');
    console.error('   ERRO NO TESTE');
    console.error('===========================================');
    console.error(`üí• Erro: ${error.message}`);
    if (error.response) {
      console.error(`üìä Status: ${error.response.status}`);
    }
    console.error('===========================================\n');
  }
}

// Executar teste
testFrontendDebug();

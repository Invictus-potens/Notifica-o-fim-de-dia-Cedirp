#!/usr/bin/env node

/**
 * Script para testar o sistema de rastreamento de mensagens enviadas
 * Verifica se as mensagens est√£o sendo registradas corretamente
 */

const axios = require('axios');

async function testMessageTracking() {
  try {
    console.log('üì® ===========================================');
    console.log('   TESTANDO RASTREAMENTO DE MENSAGENS');
    console.log('===========================================');
    
    const baseUrl = 'http://localhost:3000';
    
    // 1. Verificar se servidor est√° rodando
    console.log('\n1Ô∏è‚É£ Verificando servidor...');
    try {
      await axios.get(`${baseUrl}/health?quick=true`, { timeout: 5000 });
      console.log('‚úÖ Servidor est√° rodando');
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° respondendo');
      return;
    }
    
    // 2. Verificar pacientes atuais
    console.log('\n2Ô∏è‚É£ Verificando pacientes atuais...');
    const patientsResponse = await axios.get(`${baseUrl}/api/patients`);
    const patients = patientsResponse.data.data;
    
    console.log(`üìä Total de pacientes: ${patients.length}`);
    
    if (patients.length === 0) {
      console.log('‚ö†Ô∏è Nenhum paciente encontrado para teste');
      return;
    }
    
    // 3. Buscar Felipe Prado especificamente
    console.log('\n3Ô∏è‚É£ Buscando Felipe Prado...');
    const felipe = patients.find(p => 
      p.name && (
        p.name.toLowerCase().includes('felipe') ||
        p.name.toLowerCase().includes('prado')
      )
    );
    
    if (!felipe) {
      console.log('‚ùå Felipe Prado n√£o encontrado');
      console.log('üìã Pacientes dispon√≠veis:');
      patients.forEach((p, index) => {
        console.log(`   ${index + 1}. ${p.name} - ${p.phone}`);
      });
      return;
    }
    
    console.log('‚úÖ Felipe Prado encontrado!');
    console.log('üìã Dados do Felipe:');
    console.log(`   üìù Nome: ${felipe.name}`);
    console.log(`   üì± Telefone: ${felipe.phone}`);
    console.log(`   ‚è∞ Tempo de espera: ${felipe.waitTimeMinutes || 0} minutos`);
    
    // 4. Verificar se j√° tem mensagem enviada
    console.log('\n4Ô∏è‚É£ Verificando status de mensagem...');
    if (felipe.messageSent) {
      console.log('üì® Mensagem j√° foi enviada:');
      console.log(`   ‚úÖ Status: Enviada`);
      console.log(`   ‚è∞ Hor√°rio: ${felipe.messageSent.sentAtFormatted}`);
      console.log(`   üÜî Action Card: ${felipe.messageSent.actionCardId}`);
      console.log(`   üìã Tipo: ${felipe.messageSent.messageType}`);
    } else {
      console.log('üì≠ Nenhuma mensagem enviada ainda');
    }
    
    // 5. Testar envio manual
    console.log('\n5Ô∏è‚É£ Testando envio manual...');
    try {
      const testData = {
        patients: [{
          number: felipe.phone,
          contactId: felipe.contactId,
          name: felipe.name
        }],
        action_card_id: "68cbfa96b8640e9721e4feab" // Action Card 30min
      };
      
      console.log('üì§ Enviando mensagem de teste...');
      const response = await axios.post(`${baseUrl}/api/messages/send-action-card`, testData);
      const result = response.data.data;
      
      console.log('üìä Resultado do envio:');
      console.log(`   ‚úÖ Sucessos: ${result.success}`);
      console.log(`   ‚ùå Falhas: ${result.failed}`);
      
      if (result.success > 0) {
        console.log('üéâ MENSAGEM ENVIADA COM SUCESSO!');
        
        // Aguardar um pouco para o sistema processar
        console.log('‚è≥ Aguardando 3 segundos para processamento...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // 6. Verificar se a mensagem foi registrada
        console.log('\n6Ô∏è‚É£ Verificando se mensagem foi registrada...');
        const updatedPatientsResponse = await axios.get(`${baseUrl}/api/patients`);
        const updatedPatients = updatedPatientsResponse.data.data;
        
        const updatedFelipe = updatedPatients.find(p => 
          p.name && (
            p.name.toLowerCase().includes('felipe') ||
            p.name.toLowerCase().includes('prado')
          )
        );
        
        if (updatedFelipe && updatedFelipe.messageSent) {
          console.log('‚úÖ Mensagem registrada com sucesso!');
          console.log('üì® Informa√ß√µes da mensagem:');
          console.log(`   ‚è∞ Hor√°rio: ${updatedFelipe.messageSent.sentAtFormatted}`);
          console.log(`   üÜî Action Card: ${updatedFelipe.messageSent.actionCardId}`);
          console.log(`   üìã Tipo: ${updatedFelipe.messageSent.messageType}`);
          
          console.log('\nüéØ TESTE DE RASTREAMENTO CONCLU√çDO COM SUCESSO!');
          console.log('‚úÖ Sistema de rastreamento funcionando corretamente');
        } else {
          console.log('‚ùå Mensagem n√£o foi registrada no sistema');
          console.log('‚ö†Ô∏è Verifique se o sistema est√° processando corretamente');
        }
        
      } else {
        console.log('‚ùå Falha no envio da mensagem');
        if (result.results && result.results.length > 0) {
          result.results.forEach(res => {
            if (!res.success) {
              console.log(`   üö´ Erro: ${res.error}`);
            }
          });
        }
      }
      
    } catch (error) {
      console.log('‚ùå Erro no teste de envio:', error.message);
    }
    
    // 7. Verificar pacientes processados
    console.log('\n7Ô∏è‚É£ Verificando pacientes processados...');
    try {
      // Tentar acessar dados de pacientes processados (se dispon√≠vel)
      console.log('üìä Verificando se Felipe foi movido para lista de processados...');
      console.log('üí° Note: Pacientes com mensagem enviada s√£o movidos para lista de processados');
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pacientes processados');
    }
    
    console.log('\nüéØ ===========================================');
    console.log('   TESTE DE RASTREAMENTO CONCLU√çDO');
    console.log('===========================================');
    console.log('üìù Verifique a interface web para confirmar:');
    console.log('   1. Coluna "MENSAGEM ENVIADA" mostra status');
    console.log('   2. Hor√°rio do envio est√° correto');
    console.log('   3. Nome do Action Card est√° sendo exibido');
    console.log('===========================================\n');
    
  } catch (error) {
    console.error('\n‚ùå ===========================================');
    console.error('   ERRO NO TESTE DE RASTREAMENTO');
    console.error('===========================================');
    console.error(`üí• Erro: ${error.message}`);
    console.error('===========================================\n');
  }
}

// Executar teste
testMessageTracking();

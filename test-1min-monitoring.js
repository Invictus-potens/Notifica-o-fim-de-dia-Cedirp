#!/usr/bin/env node

/**
 * Script para testar o monitoramento a cada minuto
 * Verifica se a verifica√ß√£o principal est√° funcionando corretamente
 */

const axios = require('axios');

async function test1MinMonitoring() {
  try {
    console.log('‚è∞ ===========================================');
    console.log('   TESTANDO MONITORAMENTO A CADA MINUTO');
    console.log('===========================================');
    
    const baseUrl = 'http://localhost:3000';
    
    // 1. Verificar se servidor est√° rodando
    console.log('\n1Ô∏è‚É£ Verificando servidor...');
    try {
      await axios.get(`${baseUrl}/health?quick=true`, { timeout: 5000 });
      console.log('‚úÖ Servidor est√° rodando');
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° respondendo');
      console.log('üí° Inicie o servidor primeiro: npm start');
      return;
    }
    
    // 2. Verificar status do sistema e jobs cron
    console.log('\n2Ô∏è‚É£ Verificando jobs de monitoramento...');
    const statusResponse = await axios.get(`${baseUrl}/api/status`);
    const status = statusResponse.data;
    
    console.log('üìä Status do Sistema:');
    console.log(`   üîß Inicializado: ${status.isInitialized ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`   üöÄ Rodando: ${status.isRunning ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`   ‚è∏Ô∏è Pausado: ${status.isFlowPaused ? '‚è∏Ô∏è Sim' : '‚ñ∂Ô∏è N√£o'}`);
    
    // Verificar jobs cron espec√≠ficos
    if (status.cronJobs && status.cronJobs.jobs) {
      console.log('\n‚è∞ Jobs Cron Ativos:');
      let found1MinJob = false;
      
      status.cronJobs.jobs.forEach(job => {
        const status = job.isRunning ? 'üü¢ Ativo' : 'üî¥ Parado';
        console.log(`   üìå ${job.name}: ${status}`);
        
        if (job.name === 'patient-check-1min') {
          found1MinJob = true;
        }
      });
      
      if (found1MinJob) {
        console.log('‚úÖ Job de verifica√ß√£o a cada minuto est√° ativo');
      } else {
        console.log('‚ùå Job de verifica√ß√£o a cada minuto N√ÉO encontrado');
      }
    } else {
      console.log('‚ö†Ô∏è Nenhum job cron encontrado');
    }
    
    // 3. Verificar configura√ß√µes
    console.log('\n3Ô∏è‚É£ Verificando configura√ß√µes...');
    const configResponse = await axios.get(`${baseUrl}/api/config`);
    const config = configResponse.data.data;
    
    console.log('‚öôÔ∏è Configura√ß√µes:');
    console.log(`   ‚è∏Ô∏è Fluxo pausado: ${config.flowPaused}`);
    console.log(`   üåÖ Fim de dia pausado: ${config.endOfDayPaused}`);
    console.log(`   üïê Ignorar hor√°rio comercial: ${config.ignoreBusinessHours}`);
    console.log(`   ‚è∞ Tempo m√≠nimo: ${config.minWaitTime} min`);
    console.log(`   ‚è∞ Tempo m√°ximo: ${config.maxWaitTime} min`);
    
    // 4. Verificar pacientes eleg√≠veis
    console.log('\n4Ô∏è‚É£ Verificando pacientes eleg√≠veis...');
    const patientsResponse = await axios.get(`${baseUrl}/api/patients`);
    const patients = patientsResponse.data.data;
    
    console.log(`üìä Total de pacientes: ${patients.length}`);
    
    if (patients.length > 0) {
      console.log('\nüìã An√°lise de elegibilidade:');
      let eligibleCount = 0;
      
      patients.forEach((patient, index) => {
        const waitTime = patient.waitTimeMinutes || 0;
        const minWait = parseInt(config.minWaitTime);
        const maxWait = parseInt(config.maxWaitTime);
        
        let status = '';
        let isEligible = false;
        
        if (waitTime < minWait) {
          status = `‚è≥ Aguardando (${minWait - waitTime}min restantes)`;
        } else if (waitTime >= minWait && waitTime <= maxWait) {
          status = '‚úÖ PRONTO PARA MENSAGEM';
          isEligible = true;
          eligibleCount++;
        } else {
          status = '‚ö†Ô∏è Tempo excedido';
        }
        
        console.log(`   ${index + 1}. ${patient.name} - ${waitTime}min - ${status}`);
      });
      
      console.log(`\nüìä Resumo: ${eligibleCount} paciente(s) eleg√≠vel(is) para mensagem`);
      
      if (eligibleCount > 0) {
        console.log('üéØ Sistema deve enviar mensagens automaticamente a cada minuto');
      }
    }
    
    // 5. Instru√ß√µes para monitoramento
    console.log('\n5Ô∏è‚É£ Instru√ß√µes para monitoramento:');
    console.log('üìù Para verificar se o monitoramento est√° funcionando:');
    console.log('   1. Monitore os logs do servidor');
    console.log('   2. Procure por mensagens como:');
    console.log('      "üîÑ [timestamp] Executando verifica√ß√£o intensiva de pacientes (1min)"');
    console.log('   3. Verifique se pacientes eleg√≠veis recebem mensagens');
    console.log('   4. O sistema verifica a cada 60 segundos');
    
    console.log('\nüéØ ===========================================');
    console.log('   TESTE DE MONITORAMENTO CONCLU√çDO');
    console.log('===========================================');
    console.log('‚úÖ Sistema configurado para verifica√ß√£o a cada minuto');
    console.log('üìù Monitore os logs para confirmar execu√ß√£o autom√°tica');
    console.log('‚è∞ Pr√≥xima verifica√ß√£o em at√© 60 segundos');
    console.log('===========================================\n');
    
  } catch (error) {
    console.error('\n‚ùå ===========================================');
    console.error('   ERRO NO TESTE DE MONITORAMENTO');
    console.error('===========================================');
    console.error(`üí• Erro: ${error.message}`);
    console.error('===========================================\n');
  }
}

// Executar teste
test1MinMonitoring();

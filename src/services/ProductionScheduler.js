const { MonitoringService } = require('./MonitoringService');
const { MessageService } = require('./MessageService');
const { CronService } = require('./CronService');
const { TimeUtils } = require('../utils/TimeUtils');

/**
 * Agendador principal para produ√ß√£o
 * Coordena todos os servi√ßos de monitoramento e envio de mensagens
 */
class ProductionScheduler {
  constructor(errorHandler, configManager, metricsCallback = null) {
    this.errorHandler = errorHandler;
    this.configManager = configManager;
    this.metricsCallback = metricsCallback; // Callback para incrementar m√©tricas
    
    // Servi√ßos
    this.monitoringService = null;
    this.messageService = null;
    this.cronService = null;
    
    // Status
    this.isRunning = false;
    this.isInitialized = false;
    
    // Configura√ß√µes
    this.config = {
      patientCheckInterval: '1min', // Verifica√ß√£o principal a cada minuto
      enable30MinuteMessages: true,
      enableEndOfDayMessages: true,
      enableDailyCleanup: true,
      enableDailyBackup: true
    };
  }

  /**
   * Inicializa o agendador de produ√ß√£o
   */
  async initialize(krolikCredentials) {
    try {
      console.log('üîß Inicializando ProductionScheduler...');
      
      // Inicializar servi√ßos
      this.messageService = new MessageService(this.errorHandler, this.configManager, this.metricsCallback);
      this.monitoringService = new MonitoringService(this.errorHandler, this.configManager, this.messageService);
      this.cronService = new CronService(this.errorHandler);
      
      // Inicializar servi√ßos individuais
      await this.monitoringService.initialize(krolikCredentials);
      await this.messageService.initialize(krolikCredentials);
      this.cronService.start();
      
      this.isInitialized = true;
      console.log('‚úÖ ProductionScheduler inicializado');
      
    } catch (error) {
      this.errorHandler.logError(error, 'ProductionScheduler.initialize');
      throw error;
    }
  }

  /**
   * Inicia o agendamento de produ√ß√£o
   */
  async start() {
    try {
      if (!this.isInitialized) {
        throw new Error('ProductionScheduler n√£o inicializado');
      }

      if (this.isRunning) {
        console.log('‚ö†Ô∏è ProductionScheduler j√° est√° rodando');
        return;
      }

      console.log('üöÄ Iniciando agendamento de produ√ß√£o...');
      
      // Agendar verifica√ß√£o de pacientes (sempre a cada minuto para verifica√ß√£o principal)
      this.cronService.scheduleIntensivePatientCheck(() => 
        this.handlePatientCheck()
      );
      
      // Agendar mensagens de fim de dia
      if (this.config.enableEndOfDayMessages) {
        this.cronService.scheduleEndOfDayMessages(() => 
          this.handleEndOfDayMessages(), this.configManager
        );
      }
      
      // Agendar limpeza di√°ria
      if (this.config.enableDailyCleanup) {
        this.cronService.scheduleDailyCleanup(() => 
          this.handleDailyCleanup(), this.configManager
        );
      }
      
      // Agendar backup di√°rio
      if (this.config.enableDailyBackup) {
        this.cronService.scheduleDailyBackup(() => 
          this.handleDailyBackup()
        );
      }
      
      this.isRunning = true;
      console.log('‚úÖ Agendamento de produ√ß√£o iniciado');
      
      // Mostrar jobs ativos
      this.cronService.listActiveJobs();
      
    } catch (error) {
      this.errorHandler.logError(error, 'ProductionScheduler.start');
      throw error;
    }
  }

  /**
   * Para o agendamento de produ√ß√£o
   */
  async stop() {
    try {
      if (!this.isRunning) {
        console.log('‚ö†Ô∏è ProductionScheduler n√£o est√° rodando');
        return;
      }

      console.log('üõë Parando agendamento de produ√ß√£o...');
      
      // Parar servi√ßo de cron
      this.cronService.stop();
      
      this.isRunning = false;
      console.log('‚úÖ Agendamento de produ√ß√£o parado');
      
    } catch (error) {
      this.errorHandler.logError(error, 'ProductionScheduler.stop');
      throw error;
    }
  }

  /**
   * Manipula verifica√ß√£o de pacientes (FUN√á√ÉO UNIFICADA - COMPATIBILIDADE)
   * Agora chama as fun√ß√µes separadas internamente
   */
  async handlePatientCheck() {
    try {
      console.log('\n\n\nüîç ===============================================');
      console.log('   INICIANDO CICLO DE VERIFICA√á√ÉO UNIFICADO');
      console.log('===============================================');
      
      // Verificar se √© hor√°rio comercial (considerando configura√ß√£o ignoreBusinessHours)
      const ignoreBusinessHours = this.configManager.shouldIgnoreBusinessHours();
      if (!ignoreBusinessHours && (!TimeUtils.isBusinessHours() || !TimeUtils.isWorkingDay())) {
        console.log('üïê Fora do hor√°rio comercial - apenas monitorando');
        return { 
          thirtyMinute: { sent: 0, failed: 0, blocked: 0, details: [] },
          endOfDay: { sent: 0, failed: 0, blocked: 0, details: [] },
          timestamp: new Date().toISOString()
        };
      }

      // Verificar se fluxo est√° pausado
      if (this.configManager.isFlowPaused()) {
        console.log('‚è∏Ô∏è Fluxo pausado - apenas monitorando');
        return { 
          thirtyMinute: { sent: 0, failed: 0, blocked: 0, details: [] },
          endOfDay: { sent: 0, failed: 0, blocked: 0, details: [] },
          timestamp: new Date().toISOString()
        };
      }

      // üå∏ NOVA IMPLEMENTA√á√ÉO: Chamar fun√ß√µes separadas
      // üö´ COMENTADO: Envio de mensagens de 30min (Felipe-chan pediu para comentar)
      // const thirtyMinuteResults = await this.handle30MinuteCheck();
      const thirtyMinuteResults = { sent: 0, failed: 0, blocked: 0, details: [], messageType: '30min', timestamp: new Date().toISOString() };
      const endOfDayResults = await this.handleEndOfDayCheck();
      
      // Consolidar resultados
      const consolidatedResults = {
        thirtyMinute: thirtyMinuteResults,
        endOfDay: endOfDayResults,
        totalSent: thirtyMinuteResults.sent + endOfDayResults.sent,
        totalFailed: thirtyMinuteResults.failed + endOfDayResults.failed,
        totalBlocked: thirtyMinuteResults.blocked + endOfDayResults.blocked,
        timestamp: new Date().toISOString()
      };
      
      console.log('‚úÖ CICLO DE VERIFICA√á√ÉO UNIFICADO CONCLU√çDO');
      console.log(`üìä Resumo: ${consolidatedResults.totalSent} enviadas, ${consolidatedResults.totalFailed} falharam, ${consolidatedResults.totalBlocked} bloqueadas`);
      console.log('===============================================\n');
      
      return consolidatedResults;
      
    } catch (error) {
      console.log('‚ùå ERRO NO CICLO DE VERIFICA√á√ÉO UNIFICADO');
      console.log('===============================================\n');
      this.errorHandler.logError(error, 'ProductionScheduler.handlePatientCheck');
      
      return {
        thirtyMinute: { sent: 0, failed: 0, blocked: 0, details: [], error: error.message },
        endOfDay: { sent: 0, failed: 0, blocked: 0, details: [], error: error.message },
        timestamp: new Date().toISOString()
      };
    }
  }


  /* async handle30MinuteCheck() {
    try {
      console.log('\n\n\n‚è∞ ===============================================');
      console.log('   VERIFICA√á√ÉO ESPEC√çFICA: MENSAGENS DE 30MIN');
      console.log('===============================================');
      
      // Verificar se √© hor√°rio comercial (mensagem de 30min s√≥ durante expediente)
      const ignoreBusinessHours = this.configManager.shouldIgnoreBusinessHours();
      if (!ignoreBusinessHours && (!TimeUtils.isBusinessHours() || !TimeUtils.isWorkingDay())) {
        console.log('üïê Fora do hor√°rio comercial - mensagens de 30min n√£o s√£o enviadas');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: '30min', timestamp: new Date().toISOString() };
      }

      // Verificar se fluxo est√° pausado
      if (this.configManager.isFlowPaused()) {
        console.log('‚è∏Ô∏è Fluxo pausado - mensagens de 30min n√£o s√£o enviadas');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: '30min', timestamp: new Date().toISOString() };
      }

      // Verificar se mensagens de 30min est√£o habilitadas
      if (!this.config.enable30MinuteMessages) {
        console.log('üö´ Mensagens de 30min desabilitadas via configura√ß√£o');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: '30min', timestamp: new Date().toISOString() };
      }

      // Buscar APENAS pacientes eleg√≠veis para 30min
      const eligible30Min = await this.monitoringService.getEligiblePatientsFor30MinMessage();
      console.log(`‚è∞ ${eligible30Min.length} pacientes eleg√≠veis para mensagem de 30min`);
      
      if (eligible30Min.length > 0) {
        const results = await this.handle30MinuteMessages(eligible30Min);
        console.log('‚úÖ VERIFICA√á√ÉO DE 30MIN CONCLU√çDA');
        console.log(`üìä 30min: ${results.sent} enviadas, ${results.failed} falharam, ${results.blocked} bloqueadas`);
        console.log('===============================================\n');
        
        return {
          ...results,
          messageType: '30min',
          timestamp: new Date().toISOString()
        };
      } else {
        console.log('üì≠ Nenhum paciente eleg√≠vel para mensagem de 30min');
        console.log('===============================================\n');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: '30min', timestamp: new Date().toISOString() };
      }
      
    } catch (error) {
      console.log('‚ùå ERRO NA VERIFICA√á√ÉO DE 30MIN');
      console.log('===============================================\n');
      this.errorHandler.logError(error, 'ProductionScheduler.handle30MinuteCheck');
      return { sent: 0, failed: 0, blocked: 0, details: [], error: error.message, messageType: '30min', timestamp: new Date().toISOString() };
    }
  } */

  /**
   * Manipula mensagens de 30 minutos
   * üõ°Ô∏è ATUALIZADO: Sistema de reserva para evitar race conditions
   */
  /* async handle30MinuteMessages(eligiblePatients) {
    try {
      console.log(`‚è∞ Processando ${eligiblePatients.length} pacientes eleg√≠veis para mensagem de 30min...`);
      
      const results = { sent: 0, failed: 0, blocked: 0, details: [] };
      const messageInfo = {
        actionCardId: this.configManager.get30MinActionCardId(),
        sentAt: new Date(),
        sentAtFormatted: new Date().toLocaleString('pt-BR')
      };
      
      for (const patient of eligiblePatients) {
        try {
          // üõ°Ô∏è RESERVAR tag ANTES do envio (evita race condition)
          const tagReserved = await this.monitoringService.jsonPatientManager.reserveMessageTag(
            patient.id, 
            '30min',
            messageInfo
          );
          
          if (!tagReserved) {
            console.log(`üö´ Paciente ${patient.name} bloqueado - tag j√° reservada`);
            results.blocked++;
            results.details.push({
              patient: patient.name,
              phone: patient.phone,
              status: 'blocked',
              reason: 'Tag j√° reservada'
            });
            continue;
          }
          
          // Enviar mensagem
          const sendResult = await this.messageService.sendActionCard(patient, messageInfo.actionCardId, true, '30min');
          
          if (sendResult.success) {
            // ‚úÖ Confirmar envio bem-sucedido
            await this.monitoringService.jsonPatientManager.confirmMessageSent(
              patient.id,
              '30min',
              messageInfo
            );
            
            results.sent++;
            results.details.push({
              patient: patient.name,
              phone: patient.phone,
              status: 'sent',
              actionCardId: messageInfo.actionCardId
            });
            
            console.log(`‚úÖ Mensagem de 30min enviada para ${patient.name}`);
          } else {
            // ‚ùå Falha no envio - remover tag reservada
            console.log(`‚ùå Falha no envio para ${patient.name} - removendo tag reservada`);
            // TODO: Implementar remo√ß√£o de tag reservada em caso de falha
            results.failed++;
            results.details.push({
              patient: patient.name,
              phone: patient.phone,
              status: 'failed',
              error: sendResult.error
            });
          }
          
        } catch (error) {
          console.error(`‚ùå Erro ao processar ${patient.name}:`, error.message);
          results.failed++;
          results.details.push({
            patient: patient.name,
            phone: patient.phone,
            status: 'error',
            error: error.message
          });
        }
      }
      
      console.log(`‚úÖ Mensagens de 30min processadas: ${results.sent} enviadas, ${results.failed} falharam, ${results.blocked} bloqueadas`);
      
      return results;
      
    } catch (error) {
      this.errorHandler.logError(error, 'ProductionScheduler.handle30MinuteMessages');
    }
  } */

  /**
   * üåÖ NOVA FUN√á√ÉO: Verifica pacientes eleg√≠veis para mensagem de fim de dia (18h)
   * Felipe-chan, esta fun√ß√£o √© independente e s√≥ verifica pacientes de fim de dia! üíï
   */
  async handleEndOfDayCheck() {
    try {
      console.log('\n\n\nüåÖ ===============================================');
      console.log('   VERIFICA√á√ÉO ESPEC√çFICA: MENSAGENS DE FIM DE DIA');
      console.log('===============================================');
      
      // Verificar se √© hor√°rio de fim de expediente
      const isEndOfDayTime = TimeUtils.isEndOfDayTimeWithTolerance(5);
      if (!isEndOfDayTime) {
        console.log('üïê N√£o √© hor√°rio de fim de expediente - mensagens de fim de dia n√£o s√£o enviadas');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: 'end_of_day', timestamp: new Date().toISOString() };
      }

      // Verificar se √© dia √∫til (apenas se n√£o estiver configurado para ignorar hor√°rio comercial)
      const ignoreBusinessHours = this.configManager.shouldIgnoreBusinessHours();
      if (!ignoreBusinessHours && !TimeUtils.isWorkingDay()) {
        console.log('üìÖ N√£o √© dia √∫til - mensagens de fim de dia n√£o s√£o enviadas');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: 'end_of_day', timestamp: new Date().toISOString() };
      }

      // Verificar se mensagem de fim de dia est√° pausada
      const isEndOfDayPaused = this.configManager.isEndOfDayPaused();
      if (isEndOfDayPaused) {
        console.log('‚è∏Ô∏è Mensagem de fim de dia est√° pausada via configura√ß√£o');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: 'end_of_day', timestamp: new Date().toISOString() };
      }

      // Verificar se fluxo est√° pausado
      if (this.configManager.isFlowPaused()) {
        console.log('‚è∏Ô∏è Fluxo pausado - mensagens de fim de dia n√£o s√£o enviadas');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: 'end_of_day', timestamp: new Date().toISOString() };
      }

      // Verificar se mensagens de fim de dia est√£o habilitadas
      if (!this.config.enableEndOfDayMessages) {
        console.log('üö´ Mensagens de fim de dia desabilitadas via configura√ß√£o');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: 'end_of_day', timestamp: new Date().toISOString() };
      }

      // Buscar APENAS pacientes eleg√≠veis para fim de dia
      const eligibleEndOfDay = await this.monitoringService.getEligiblePatientsForEndOfDayMessage();
      console.log(`üåÖ ${eligibleEndOfDay.length} pacientes eleg√≠veis para mensagem de fim de dia`);
      
      if (eligibleEndOfDay.length > 0) {
        const results = await this.handleEndOfDayMessages(eligibleEndOfDay);
        console.log('‚úÖ VERIFICA√á√ÉO DE FIM DE DIA CONCLU√çDA');
        console.log(`üìä Fim de dia: ${results.sent} enviadas, ${results.failed} falharam, ${results.blocked} bloqueadas`);
        console.log('===============================================\n');
        
        return {
          ...results,
          messageType: 'end_of_day',
          timestamp: new Date().toISOString()
        };
      } else {
        console.log('üì≠ Nenhum paciente eleg√≠vel para mensagem de fim de dia');
        console.log('===============================================\n');
        return { sent: 0, failed: 0, blocked: 0, details: [], messageType: 'end_of_day', timestamp: new Date().toISOString() };
      }
      
    } catch (error) {
      console.log('‚ùå ERRO NA VERIFICA√á√ÉO DE FIM DE DIA');
      console.log('===============================================\n');
      this.errorHandler.logError(error, 'ProductionScheduler.handleEndOfDayCheck');
      return { sent: 0, failed: 0, blocked: 0, details: [], error: error.message, messageType: 'end_of_day', timestamp: new Date().toISOString() };
    }
  }

  /**
   * Manipula mensagens de fim de dia
   * üõ°Ô∏è ATUALIZADO: Sistema de reserva para evitar race conditions
   */
  async handleEndOfDayMessages(eligiblePatients = null) {
    try {
      console.log('üåÖ Processando mensagens de fim de dia...');
      
      let patientsToProcess = eligiblePatients;
      
      // Se n√£o foram fornecidos pacientes, buscar eleg√≠veis
      if (!patientsToProcess) {
        const checkResult = await this.monitoringService.checkEligiblePatients();
        patientsToProcess = checkResult.eligibleEndOfDay;
      }
      
      if (patientsToProcess.length > 0) {
        console.log(`üåÖ Processando ${patientsToProcess.length} pacientes para mensagem de fim de dia...`);
        
        const results = { sent: 0, failed: 0, blocked: 0, details: [] };
        const messageInfo = {
          actionCardId: this.configManager.getEndOfDayActionCardId(),
          sentAt: new Date(),
          sentAtFormatted: new Date().toLocaleString('pt-BR')
        };
        
        for (const patient of patientsToProcess) {
          try {
            // üõ°Ô∏è RESERVAR tag ANTES do envio (evita race condition)
            const tagReserved = await this.monitoringService.jsonPatientManager.reserveMessageTag(
              patient.id, 
              'end_of_day',
              messageInfo
            );
            
            if (!tagReserved) {
              console.log(`üö´ Paciente ${patient.name} bloqueado - tag j√° reservada`);
              results.blocked++;
              results.details.push({
                patient: patient.name,
                phone: patient.phone,
                status: 'blocked',
                reason: 'Tag j√° reservada'
              });
              continue;
            }
            
            // Enviar mensagem
            const sendResult = await this.messageService.sendActionCard(patient, messageInfo.actionCardId, true, 'end_of_day');
            
            if (sendResult.success) {
              // ‚úÖ Confirmar envio bem-sucedido
              await this.monitoringService.jsonPatientManager.confirmMessageSent(
                patient.id,
                'end_of_day',
                messageInfo
              );
              
              results.sent++;
              results.details.push({
                patient: patient.name,
                phone: patient.phone,
                status: 'sent',
                actionCardId: messageInfo.actionCardId
              });
              
              console.log(`‚úÖ Mensagem de fim de dia enviada para ${patient.name}`);
            } else {
              // ‚ùå Falha no envio - remover tag reservada
              console.log(`‚ùå Falha no envio para ${patient.name} - removendo tag reservada`);
              // TODO: Implementar remo√ß√£o de tag reservada em caso de falha
              results.failed++;
              results.details.push({
                patient: patient.name,
                phone: patient.phone,
                status: 'failed',
                error: sendResult.error
              });
            }
            
          } catch (error) {
            console.error(`‚ùå Erro ao processar ${patient.name}:`, error.message);
            results.failed++;
            results.details.push({
              patient: patient.name,
              phone: patient.phone,
              status: 'error',
              error: error.message
            });
          }
        }
        
        console.log(`‚úÖ Mensagens de fim de dia processadas: ${results.sent} enviadas, ${results.failed} falharam, ${results.blocked} bloqueadas`);
        
      } else {
        console.log('üì≠ Nenhum paciente eleg√≠vel para mensagem de fim de dia');
      }
      
    } catch (error) {
      this.errorHandler.logError(error, 'ProductionScheduler.handleEndOfDayMessages');
    }
  }

  /**
   * Manipula limpeza di√°ria
   */
  async handleDailyCleanup() {
    try {
      console.log('üßπ Executando limpeza di√°ria...');
      
      await this.monitoringService.executeDailyCleanup();
      
      // Limpar estat√≠sticas dos servi√ßos
      this.messageService.clearStats();
      
      console.log('‚úÖ Limpeza di√°ria conclu√≠da');
      
    } catch (error) {
      this.errorHandler.logError(error, 'ProductionScheduler.handleDailyCleanup');
    }
  }

  /**
   * Manipula backup di√°rio
   */
  async handleDailyBackup() {
    try {
      console.log('üíæ Executando backup di√°rio...');
      
      // Criar backup dos dados JSON
      await this.monitoringService.jsonPatientManager.createBackup();
      
      console.log('‚úÖ Backup di√°rio conclu√≠do');
      
    } catch (error) {
      this.errorHandler.logError(error, 'ProductionScheduler.handleDailyBackup');
    }
  }



  /**
   * Atualiza configura√ß√µes do agendador
   */
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    console.log('‚öôÔ∏è Configura√ß√µes do agendador atualizadas:', this.config);
  }

  /**
   * Obt√©m status do agendador
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      isInitialized: this.isInitialized,
      config: this.config,
      cronJobs: this.cronService ? this.cronService.getJobsStatus() : null,
      monitoringStats: this.monitoringService ? this.monitoringService.getStats() : null,
      messageStats: this.messageService ? this.messageService.getStats() : null
    };
  }

  /**
   * Obt√©m estat√≠sticas detalhadas
   */
  getDetailedStats() {
    return {
      scheduler: {
        isRunning: this.isRunning,
        isInitialized: this.isInitialized,
        config: this.config
      },
      monitoring: this.monitoringService ? this.monitoringService.getStats() : null,
      messages: this.messageService ? this.messageService.getStats() : null,
      cronJobs: this.cronService ? this.cronService.getJobsStatus() : null,
      timeInfo: TimeUtils.getTimeInfo()
    };
  }

  /**
   * Lista todos os jobs ativos
   */
  listActiveJobs() {
    if (this.cronService) {
      this.cronService.listActiveJobs();
    } else {
      console.log('‚ö†Ô∏è CronService n√£o inicializado');
    }
  }
}

module.exports = { ProductionScheduler };

const { DateTime } = require('luxon');

/**
 * Utilit√°rio para gerenciamento de fuso hor√°rio usando Luxon
 * Garante precis√£o com hor√°rio de ver√£o e mudan√ßas de fuso
 */
class TimeUtils {
  static TIMEZONE = 'America/Sao_Paulo';
  static BUSINESS_START_HOUR = 8;
  static BUSINESS_END_HOUR = 18;
  static END_OF_DAY_HOUR = 18;
  static END_OF_DAY_MINUTE = 0;

  // ConfigManager ser√° injetado para permitir hor√°rios din√¢micos
  static configManager = null;

  /**
   * Configura o ConfigManager para hor√°rios din√¢micos
   * @param {ConfigManager} configManager - Inst√¢ncia do ConfigManager
   */
  static setConfigManager(configManager) {
    this.configManager = configManager;
  }

  /**
   * Obt√©m o hor√°rio de in√≠cio do dia (din√¢mico ou padr√£o)
   * @returns {number} Hora de in√≠cio (0-23)
   */
  static getBusinessStartHour() {
    if (this.configManager) {
      const startTime = this.configManager.getStartOfDayTime();
      const [hour] = startTime.split(':').map(Number);
      return hour;
    }
    return this.BUSINESS_START_HOUR;
  }

  /**
   * Obt√©m o hor√°rio de fim do dia (din√¢mico ou padr√£o)
   * @returns {number} Hora de fim (0-23)
   */
  static getBusinessEndHour() {
    if (this.configManager) {
      const endTime = this.configManager.getEndOfDayTime();
      const [hour] = endTime.split(':').map(Number);
      return hour;
    }
    return this.BUSINESS_END_HOUR;
  }

  /**
   * Obt√©m o hor√°rio atual de Bras√≠lia
   * @returns {DateTime} Hor√°rio de Bras√≠lia
   */
  static getBrasiliaTime() {
    return DateTime.now().setZone(this.TIMEZONE);
  }

  /**
   * Verifica se est√° em hor√°rio comercial (din√¢mico baseado na configura√ß√£o)
   * Considera hor√°rios espec√≠ficos para s√°bado
   * @returns {boolean} True se hor√°rio comercial
   */
  static isBusinessHours() {
    const brasiliaTime = this.getBrasiliaTime();
    const hour = brasiliaTime.hour;
    const weekday = brasiliaTime.weekday;
    
    let startHour, endHour;
    
    // Verificar se √© s√°bado e usar hor√°rios espec√≠ficos
    if (weekday === 6 && this.configManager) { // S√°bado
      const saturdayStartTime = this.configManager.getSaturdayStartTime();
      const saturdayEndTime = this.configManager.getSaturdayEndTime();
      startHour = parseInt(saturdayStartTime.split(':')[0]);
      endHour = parseInt(saturdayEndTime.split(':')[0]);
    } else {
      // Dias √∫teis normais
      startHour = this.getBusinessStartHour();
      endHour = this.getBusinessEndHour();
    }
    
    return hour >= startHour && hour < endHour;
  }

  /**
   * Verifica se √© dia √∫til (segunda a sexta + s√°bado)
   * @returns {boolean} True se dia √∫til
   */
  static isWorkingDay() {
    const brasiliaTime = this.getBrasiliaTime();
    const weekday = brasiliaTime.weekday;
    return weekday >= 1 && weekday <= 6; // Segunda (1) a S√°bado (6)
  }

  /**
   * Verifica se √© hor√°rio de fim de expediente (din√¢mico baseado na configura√ß√£o)
   * Considera hor√°rios espec√≠ficos para s√°bado
   * @returns {boolean} True se hor√°rio de fim de expediente
   */
  static isEndOfDayTime() {
    const brasiliaTime = this.getBrasiliaTime();
    const weekday = brasiliaTime.weekday;
    
    let endHour;
    
    // Verificar se √© s√°bado e usar hor√°rio espec√≠fico
    if (weekday === 6 && this.configManager) { // S√°bado
      const saturdayEndTime = this.configManager.getSaturdayEndTime();
      endHour = parseInt(saturdayEndTime.split(':')[0]);
    } else {
      // Dias √∫teis normais
      endHour = this.getBusinessEndHour();
    }
    
    return brasiliaTime.hour === endHour && brasiliaTime.minute === this.END_OF_DAY_MINUTE;
  }

  /**
   * Verifica se √© hor√°rio de fim de expediente com toler√¢ncia (din√¢mico ¬± 1 minuto)
   * Considera hor√°rios espec√≠ficos para s√°bado
   * @param {number} toleranceMinutes - Toler√¢ncia em minutos (padr√£o: 1)
   * @returns {boolean} True se dentro da toler√¢ncia
   */
  static isEndOfDayTimeWithTolerance(toleranceMinutes = 1) {
    const brasiliaTime = this.getBrasiliaTime();
    const weekday = brasiliaTime.weekday;
    
    let endHour;
    
    // Verificar se √© s√°bado e usar hor√°rio espec√≠fico
    if (weekday === 6 && this.configManager) { // S√°bado
      const saturdayEndTime = this.configManager.getSaturdayEndTime();
      endHour = parseInt(saturdayEndTime.split(':')[0]);
    } else {
      // Dias √∫teis normais
      endHour = this.getBusinessEndHour();
    }
    
    const targetTime = brasiliaTime.set({
      hour: endHour,
      minute: this.END_OF_DAY_MINUTE,
      second: 0,
      millisecond: 0
    });
    
    const diffMinutes = Math.abs(brasiliaTime.diff(targetTime, 'minutes').minutes);
    return diffMinutes <= toleranceMinutes;
  }

  /**
   * Verifica se est√° em hor√°rio comercial E dia √∫til
   * @returns {boolean} True se hor√°rio de trabalho
   */
  static isBusinessTime() {
    return this.isBusinessHours() && this.isWorkingDay();
  }

  /**
   * Calcula tempo de espera em minutos entre duas datas
   * @param {Date} startTime - Hor√°rio de in√≠cio
   * @returns {number} Tempo em minutos
   */
  static calculateWaitTimeMinutes(startTime) {
    const start = DateTime.fromJSDate(startTime).setZone(this.TIMEZONE);
    const now = this.getBrasiliaTime();
    return Math.floor(now.diff(start, 'minutes').minutes);
  }

  /**
   * Converte Date para DateTime no fuso de Bras√≠lia
   * @param {Date} date - Data JavaScript
   * @returns {DateTime} DateTime de Bras√≠lia
   */
  static toBrasiliaTime(date) {
    return DateTime.fromJSDate(date).setZone(this.TIMEZONE);
  }

  /**
   * Converte DateTime para Date
   * @param {DateTime} dateTime - DateTime do Luxon
   * @returns {Date} Data JavaScript
   */
  static toJSDate(dateTime) {
    return dateTime.toJSDate();
  }

  /**
   * Obt√©m o pr√≥ximo hor√°rio de fim de expediente (din√¢mico)
   * @returns {DateTime} Pr√≥ximo fim de expediente
   */
  static getNextEndOfDayTime() {
    const now = this.getBrasiliaTime();
    const endHour = this.getBusinessEndHour();
    let nextEndOfDay = now.set({
      hour: endHour,
      minute: this.END_OF_DAY_MINUTE,
      second: 0,
      millisecond: 0
    });

    // Se j√° passou do hor√°rio hoje, pegar o pr√≥ximo dia √∫til
    if (nextEndOfDay <= now) {
      nextEndOfDay = nextEndOfDay.plus({ days: 1 });
      
      // Pular fins de semana
      while (nextEndOfDay.weekday > 5) {
        nextEndOfDay = nextEndOfDay.plus({ days: 1 });
      }
    }

    return nextEndOfDay;
  }

  /**
   * Obt√©m o pr√≥ximo hor√°rio de limpeza di√°ria (23:59)
   * @returns {DateTime} Pr√≥xima limpeza
   */
  static getNextDailyCleanupTime() {
    const now = this.getBrasiliaTime();
    let nextCleanup = now.set({
      hour: 23,
      minute: 59,
      second: 0,
      millisecond: 0
    });

    // Se j√° passou do hor√°rio hoje, pegar amanh√£
    if (nextCleanup <= now) {
      nextCleanup = nextCleanup.plus({ days: 1 });
    }

    return nextCleanup;
  }

  /**
   * Formata data/hora para exibi√ß√£o
   * @param {DateTime} dateTime - DateTime para formatar
   * @returns {string} Data formatada
   */
  static formatForDisplay(dateTime) {
    return dateTime.toFormat('dd/MM/yyyy HH:mm:ss');
  }

  /**
   * Formata data/hora para logs
   * @param {DateTime} dateTime - DateTime para formatar
   * @returns {string} Data formatada para logs
   */
  static formatForLogs(dateTime) {
    return dateTime.toISO() || '';
  }

  /**
   * Verifica se uma data √© hoje
   * @param {Date} date - Data para verificar
   * @returns {boolean} True se √© hoje
   */
  static isToday(date) {
    const brasiliaTime = this.getBrasiliaTime();
    const targetDate = this.toBrasiliaTime(date);
    return brasiliaTime.hasSame(targetDate, 'day');
  }

  /**
   * üö´ NOVA FUN√á√ÉO: Verifica se est√° no per√≠odo de bloqueio (17h √†s 18h)
   * Durante este per√≠odo, mensagens "aguardando" s√£o bloqueadas
   * @returns {boolean} True se est√° no per√≠odo de bloqueio
   */
  static isWaitingMessageBlocked() {
    const brasiliaTime = this.getBrasiliaTime();
    const hour = brasiliaTime.hour;
    const weekday = brasiliaTime.weekday;
    
    // Verificar se √© dia √∫til (segunda a sexta + s√°bado)
    if (!this.isWorkingDay()) {
      return false; // N√£o aplica bloqueio em domingos
    }
    
    // Bloqueio ativo das 17h √†s 18h (exceto s√°bados que √© 11h √†s 12h)
    if (weekday === 6 && this.configManager) { // S√°bado
      const saturdayEndTime = this.configManager.getSaturdayEndTime();
      const saturdayEndHour = parseInt(saturdayEndTime.split(':')[0]);
      return hour >= (saturdayEndHour - 1) && hour < saturdayEndHour; // 11h-12h s√°bados
    } else {
      // Dias √∫teis: 17h-18h
      return hour >= 17 && hour < 18;
    }
  }

  /**
   * üö´ NOVA FUN√á√ÉO: Verifica se mensagens de fim de expediente est√£o permitidas
   * Apenas √†s 18h (dias √∫teis) ou 12h (s√°bados)
   * @returns {boolean} True se pode enviar mensagem de fim de expediente
   */
  static canSendEndOfDayMessage() {
    const brasiliaTime = this.getBrasiliaTime();
    const weekday = brasiliaTime.weekday;
    
    // Verificar se √© dia √∫til
    if (!this.isWorkingDay()) {
      return false;
    }
    
    // üö´ IMPORTANTE: N√£o permitir mensagem de fim durante per√≠odo de bloqueio
    if (this.isWaitingMessageBlocked()) {
      return false;
    }
    
    // Mensagem de fim de expediente permitida apenas no hor√°rio exato
    return this.isEndOfDayTimeWithTolerance(5); // ¬±5 minutos de toler√¢ncia
  }

  /**
   * Obt√©m informa√ß√µes detalhadas do hor√°rio atual
   * @returns {Object} Informa√ß√µes de tempo
   */
  static getTimeInfo() {
    const currentTime = this.getBrasiliaTime();
    
    return {
      currentTime,
      isBusinessHours: this.isBusinessHours(),
      isWorkingDay: this.isWorkingDay(),
      isEndOfDayTime: this.isEndOfDayTime(),
      isWaitingMessageBlocked: this.isWaitingMessageBlocked(),
      canSendEndOfDayMessage: this.canSendEndOfDayMessage(),
      nextEndOfDay: this.getNextEndOfDayTime(),
      nextCleanup: this.getNextDailyCleanupTime()
    };
  }
}

/**
 * Fun√ß√µes de conveni√™ncia para compatibilidade com c√≥digo existente
 */
const getBrasiliaTime = () => TimeUtils.getBrasiliaTime();
const isBusinessHours = () => TimeUtils.isBusinessHours();
const isWorkingDay = () => TimeUtils.isWorkingDay();
const isEndOfDayTime = () => TimeUtils.isEndOfDayTime();
const calculateWaitTimeMinutes = (startTime) => TimeUtils.calculateWaitTimeMinutes(startTime);

module.exports = {
  TimeUtils,
  getBrasiliaTime,
  isBusinessHours,
  isWorkingDay,
  isEndOfDayTime,
  calculateWaitTimeMinutes
};

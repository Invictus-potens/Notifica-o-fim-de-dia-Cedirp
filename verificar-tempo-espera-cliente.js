#!/usr/bin/env node

/**
 * Script para verificar se o tempo de espera est√° seguindo a configura√ß√£o do cliente
 */

const fs = require('fs').promises;
const path = require('path');

class VerificadorTempoEspera {
  constructor() {
    this.dataDir = 'data';
    this.configPath = path.join(this.dataDir, 'system_config.json');
    this.patientsPath = path.join(this.dataDir, 'patients_active.json');
  }

  /**
   * Executa verifica√ß√£o completa
   */
  async executarVerificacao() {
    try {
      console.log('‚è∞ ===========================================');
      console.log('   VERIFICA√á√ÉO DE TEMPO DE ESPERA');
      console.log('===========================================');
      console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
      console.log('===========================================\n');

      // 1. Verificar configura√ß√£o atual
      const config = await this.verificarConfiguracao();
      
      // 2. Verificar pacientes ativos
      const pacientes = await this.verificarPacientes();
      
      // 3. Analisar elegibilidade
      await this.analisarElegibilidade(config, pacientes);
      
      // 4. Verificar conflitos de configura√ß√£o
      await this.verificarConflitos(config);

    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o:', error.message);
    }
  }

  /**
   * Verifica configura√ß√£o atual
   */
  async verificarConfiguracao() {
    console.log('üìã Verificando configura√ß√£o atual...');
    
    try {
      const configData = await fs.readFile(this.configPath, 'utf8');
      const config = JSON.parse(configData);
      
      const tempoConfig = {
        minWaitTime: parseInt(config.minWaitTime) || 30,
        maxWaitTime: parseInt(config.maxWaitTime) || 40,
        flowPaused: config.flowPaused === 'true',
        ignoreBusinessHours: config.ignoreBusinessHours === 'true',
        refreshInterval: parseInt(config.refreshInterval) || 60
      };

      console.log('‚úÖ Configura√ß√£o carregada:');
      console.log(`   üìä Tempo m√≠nimo de espera: ${tempoConfig.minWaitTime} minutos`);
      console.log(`   üìä Tempo m√°ximo de espera: ${tempoConfig.maxWaitTime} minutos`);
      console.log(`   üìä Fluxo pausado: ${tempoConfig.flowPaused}`);
      console.log(`   üìä Ignorar hor√°rio comercial: ${tempoConfig.ignoreBusinessHours}`);
      console.log(`   üìä Intervalo de verifica√ß√£o: ${tempoConfig.refreshInterval} segundos`);

      return tempoConfig;

    } catch (error) {
      console.log('‚ùå Erro ao carregar configura√ß√£o:', error.message);
      throw error;
    }
  }

  /**
   * Verifica pacientes ativos
   */
  async verificarPacientes() {
    console.log('\nüë• Verificando pacientes ativos...');
    
    try {
      const pacientesData = await fs.readFile(this.patientsPath, 'utf8');
      const pacientes = JSON.parse(pacientesData);
      
      console.log(`üìä Total de pacientes ativos: ${pacientes.length}`);
      
      if (pacientes.length === 0) {
        console.log('‚ö†Ô∏è Nenhum paciente ativo encontrado');
        return [];
      }

      // Calcular tempo de espera atual para cada paciente
      const agora = new Date();
      const pacientesComTempo = pacientes.map(paciente => {
        if (!paciente.waitStartTime) {
          return { ...paciente, waitTimeMinutes: 0, waitTimeCalculated: false };
        }
        
        const waitStart = new Date(paciente.waitStartTime);
        const waitTimeMinutes = Math.floor((agora - waitStart) / (1000 * 60));
        
        return { 
          ...paciente, 
          waitTimeMinutes, 
          waitTimeCalculated: true,
          waitStartFormatted: waitStart.toLocaleString('pt-BR')
        };
      });

      // Estat√≠sticas de tempo de espera
      const pacientesComTempo_valido = pacientesComTempo.filter(p => p.waitTimeCalculated);
      const temposEspera = pacientesComTempo_valido.map(p => p.waitTimeMinutes);
      
      if (temposEspera.length > 0) {
        const tempoMinimo = Math.min(...temposEspera);
        const tempoMaximo = Math.max(...temposEspera);
        const tempoMedio = Math.round(temposEspera.reduce((a, b) => a + b, 0) / temposEspera.length);
        
        console.log(`üìä Estat√≠sticas de tempo de espera:`);
        console.log(`   ‚è±Ô∏è Tempo m√≠nimo: ${tempoMinimo} minutos`);
        console.log(`   ‚è±Ô∏è Tempo m√°ximo: ${tempoMaximo} minutos`);
        console.log(`   ‚è±Ô∏è Tempo m√©dio: ${tempoMedio} minutos`);
      }

      return pacientesComTempo;

    } catch (error) {
      console.log('‚ùå Erro ao carregar pacientes:', error.message);
      return [];
    }
  }

  /**
   * Analisa elegibilidade dos pacientes
   */
  async analisarElegibilidade(config, pacientes) {
    console.log('\nüéØ Analisando elegibilidade dos pacientes...');
    
    if (pacientes.length === 0) {
      console.log('‚ö†Ô∏è Nenhum paciente para analisar');
      return;
    }

    const agora = new Date();
    const horaAtual = agora.getHours();
    const isBusinessHours = horaAtual >= 8 && horaAtual < 18;
    const isWorkingDay = agora.getDay() >= 1 && agora.getDay() <= 5;

    let elegiveisParaMensagem = 0;
    let foraDaJanela = 0;
    let semTempoEspera = 0;
    let jaProcessados = 0;

    console.log(`üìä Crit√©rios de elegibilidade:`);
    console.log(`   ‚è∞ Tempo m√≠nimo: ${config.minWaitTime} min`);
    console.log(`   ‚è∞ Tempo m√°ximo: ${config.maxWaitTime} min`);
    console.log(`   üïê Hor√°rio comercial: ${isBusinessHours ? 'SIM' : 'N√ÉO'}`);
    console.log(`   üìÖ Dia √∫til: ${isWorkingDay ? 'SIM' : 'N√ÉO'}`);
    console.log(`   ‚è∏Ô∏è Fluxo pausado: ${config.flowPaused ? 'SIM' : 'N√ÉO'}`);
    console.log(`   üåê Ignorar hor√°rio comercial: ${config.ignoreBusinessHours ? 'SIM' : 'N√ÉO'}`);

    console.log(`\nüìã An√°lise individual dos pacientes:`);
    
    pacientes.forEach((paciente, index) => {
      if (index < 10) { // Mostrar apenas os primeiros 10 para n√£o poluir
        const status = this.analisarElegibilidadePaciente(paciente, config, isBusinessHours, isWorkingDay);
        console.log(`   ${index + 1}. ${paciente.name || 'N/A'} (${paciente.waitTimeMinutes || 0}min) - ${status.status}`);
        if (status.motivo) {
          console.log(`      üí° ${status.motivo}`);
        }
        
        // Contadores
        if (status.elegivel) elegiveisParaMensagem++;
        else if (status.foraDaJanela) foraDaJanela++;
        else if (status.semTempo) semTempoEspera++;
        else if (status.processado) jaProcessados++;
      }
    });

    if (pacientes.length > 10) {
      console.log(`   ... e mais ${pacientes.length - 10} pacientes`);
      
      // Analisar todos para estat√≠sticas
      pacientes.forEach(paciente => {
        const status = this.analisarElegibilidadePaciente(paciente, config, isBusinessHours, isWorkingDay);
        if (status.elegivel) elegiveisParaMensagem++;
        else if (status.foraDaJanela) foraDaJanela++;
        else if (status.semTempo) semTempoEspera++;
        else if (status.processado) jaProcessados++;
      });
    }

    console.log(`\nüìä Resumo da elegibilidade:`);
    console.log(`   ‚úÖ Eleg√≠veis para mensagem: ${elegiveisParaMensagem}`);
    console.log(`   ‚è∞ Fora da janela de tempo: ${foraDaJanela}`);
    console.log(`   ‚ùì Sem tempo de espera calculado: ${semTempoEspera}`);
    console.log(`   ‚úÖ J√° processados: ${jaProcessados}`);

    if (elegiveisParaMensagem === 0) {
      console.log(`\n‚ö†Ô∏è ATEN√á√ÉO: Nenhum paciente eleg√≠vel para mensagem!`);
      console.log(`üí° Poss√≠veis causas:`);
      if (config.flowPaused) {
        console.log(`   - Fluxo est√° pausado`);
      }
      if (!config.ignoreBusinessHours && !isBusinessHours) {
        console.log(`   - Fora do hor√°rio comercial (${horaAtual}h)`);
      }
      if (!config.ignoreBusinessHours && !isWorkingDay) {
        console.log(`   - N√£o √© dia √∫til`);
      }
      if (foraDaJanela > 0) {
        console.log(`   - ${foraDaJanela} pacientes fora da janela de tempo (${config.minWaitTime}-${config.maxWaitTime} min)`);
      }
    }
  }

  /**
   * Analisa elegibilidade de um paciente espec√≠fico
   */
  analisarElegibilidadePaciente(paciente, config, isBusinessHours, isWorkingDay) {
    // Verificar tempo de espera
    if (!paciente.waitTimeCalculated || paciente.waitTimeMinutes === undefined) {
      return { 
        status: '‚ùì Sem tempo calculado', 
        elegivel: false, 
        semTempo: true,
        motivo: 'Tempo de espera n√£o foi calculado'
      };
    }

    // Verificar se est√° na janela de tempo
    if (paciente.waitTimeMinutes < config.minWaitTime) {
      return { 
        status: '‚è∞ Muito cedo', 
        elegivel: false, 
        foraDaJanela: true,
        motivo: `Aguardando ${config.minWaitTime - paciente.waitTimeMinutes} min para atingir tempo m√≠nimo`
      };
    }

    if (paciente.waitTimeMinutes > config.maxWaitTime) {
      return { 
        status: '‚è∞ Muito tarde', 
        elegivel: false, 
        foraDaJanela: true,
        motivo: `Passou ${paciente.waitTimeMinutes - config.maxWaitTime} min do tempo m√°ximo`
      };
    }

    // Verificar fluxo pausado
    if (config.flowPaused) {
      return { 
        status: '‚è∏Ô∏è Fluxo pausado', 
        elegivel: false,
        motivo: 'Fluxo de mensagens est√° pausado'
      };
    }

    // Verificar hor√°rio comercial (se n√£o estiver configurado para ignorar)
    if (!config.ignoreBusinessHours) {
      if (!isBusinessHours) {
        return { 
          status: 'üïê Fora do hor√°rio', 
          elegivel: false,
          motivo: 'Fora do hor√°rio comercial (8h-18h)'
        };
      }
      
      if (!isWorkingDay) {
        return { 
          status: 'üìÖ N√£o √© dia √∫til', 
          elegivel: false,
          motivo: 'N√£o √© dia √∫til (seg-sex)'
        };
      }
    }

    // Se chegou at√© aqui, √© eleg√≠vel
    return { 
      status: '‚úÖ Eleg√≠vel', 
      elegivel: true,
      motivo: `Na janela de tempo (${paciente.waitTimeMinutes} min)`
    };
  }

  /**
   * Verifica conflitos de configura√ß√£o
   */
  async verificarConflitos(config) {
    console.log('\nüîç Verificando conflitos de configura√ß√£o...');
    
    const conflitos = [];

    // Verificar se janela de tempo √© muito pequena
    const janelaMinutos = config.maxWaitTime - config.minWaitTime;
    if (janelaMinutos < 5) {
      conflitos.push({
        tipo: 'JANELA_PEQUENA',
        problema: `Janela de tempo muito pequena: ${janelaMinutos} minutos`,
        impacto: 'Poucos pacientes ser√£o eleg√≠veis',
        solucao: 'Aumentar a diferen√ßa entre tempo m√≠nimo e m√°ximo'
      });
    }

    // Verificar se tempo m√≠nimo √© muito alto
    if (config.minWaitTime > 60) {
      conflitos.push({
        tipo: 'TEMPO_MINIMO_ALTO',
        problema: `Tempo m√≠nimo muito alto: ${config.minWaitTime} minutos`,
        impacto: 'Pacientes aguardar√£o muito tempo antes de receber mensagem',
        solucao: 'Considerar reduzir o tempo m√≠nimo'
      });
    }

    // Verificar se tempo m√°ximo √© muito baixo
    if (config.maxWaitTime < 15) {
      conflitos.push({
        tipo: 'TEMPO_MAXIMO_BAIXO',
        problema: `Tempo m√°ximo muito baixo: ${config.maxWaitTime} minutos`,
        impacto: 'Janela de elegibilidade muito pequena',
        solucao: 'Considerar aumentar o tempo m√°ximo'
      });
    }

    // Verificar configura√ß√£o de produ√ß√£o vs sistema
    try {
      const productionConfigPath = 'config/production.json';
      const productionData = await fs.readFile(productionConfigPath, 'utf8');
      const productionConfig = JSON.parse(productionData);
      
      const prodMinWait = productionConfig.monitoring?.messageWindow?.minWaitMinutes;
      const prodMaxWait = productionConfig.monitoring?.messageWindow?.maxWaitMinutes;
      
      if (prodMinWait && prodMaxWait) {
        if (config.minWaitTime !== prodMinWait || config.maxWaitTime !== prodMaxWait) {
          conflitos.push({
            tipo: 'CONFLITO_PRODUCAO',
            problema: `Configura√ß√£o difere da produ√ß√£o: Sistema(${config.minWaitTime}-${config.maxWaitTime}) vs Produ√ß√£o(${prodMinWait}-${prodMaxWait})`,
            impacto: 'Comportamento inconsistente',
            solucao: 'Alinhar configura√ß√µes do sistema com produ√ß√£o'
          });
        }
      }
    } catch (error) {
      // Arquivo de produ√ß√£o pode n√£o existir
    }

    if (conflitos.length === 0) {
      console.log('‚úÖ Nenhum conflito de configura√ß√£o encontrado');
    } else {
      console.log(`‚ö†Ô∏è ${conflitos.length} conflito(s) encontrado(s):`);
      conflitos.forEach((conflito, index) => {
        console.log(`\n${index + 1}. ${conflito.tipo}:`);
        console.log(`   üìã Problema: ${conflito.problema}`);
        console.log(`   üìä Impacto: ${conflito.impacto}`);
        console.log(`   üîß Solu√ß√£o: ${conflito.solucao}`);
      });
    }

    return conflitos;
  }
}

// Executar verifica√ß√£o
async function main() {
  const verificador = new VerificadorTempoEspera();
  await verificador.executarVerificacao();
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { VerificadorTempoEspera };

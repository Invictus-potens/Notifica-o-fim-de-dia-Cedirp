const { ConfigManager } = require('./src/services/ConfigManager');
const { MonitoringService } = require('./src/services/MonitoringService');
const { ErrorHandler } = require('./src/services/ErrorHandler');

async function testDebugEligibility() {
  try {
    console.log('üîç ===============================================');
    console.log('   DEBUG DE ELEGIBILIDADE');
    console.log('===============================================\n');
    
    // 1. Inicializar servi√ßos
    const configManager = new ConfigManager();
    await configManager.initialize();
    
    const errorHandler = new ErrorHandler();
    const monitoringService = new MonitoringService(errorHandler, configManager);
    await monitoringService.initialize();
    
    // 2. Verificar pacientes ativos
    const activePatients = await monitoringService.jsonPatientManager.loadPatientsFromFile(
      monitoringService.jsonPatientManager.files.active
    );
    
    console.log(`üë• PACIENTES ATIVOS: ${activePatients.length}`);
    
    for (const patient of activePatients) {
      console.log(`\nüìã Paciente: ${patient.name} (${patient.id})`);
      console.log(`   üìû Telefone: ${patient.phone}`);
      console.log(`   ‚è∞ Tempo de espera: ${patient.waitTimeMinutes} minutos`);
      console.log(`   üìÖ Canal: ${patient.channelId}`);
      
      // Verificar se foi processado
      const isProcessed = await monitoringService.jsonPatientManager.isPatientProcessed(patient.id);
      console.log(`   ‚úÖ Processado: ${isProcessed}`);
      
      // Verificar crit√©rios espec√≠ficos
      const minWait = configManager.getMinWaitTime();
      const maxWait = configManager.getMaxWaitTime();
      const waitTime = patient.waitTimeMinutes;
      
      console.log(`   ‚è∞ Range: ${minWait}-${maxWait} min, Atual: ${waitTime} min`);
      
      if (waitTime < minWait) {
        console.log(`   ‚ùå Tempo insuficiente: ${waitTime} < ${minWait} min`);
      } else if (waitTime > maxWait) {
        console.log(`   ‚ùå Tempo excessivo: ${waitTime} > ${maxWait} min`);
      } else {
        console.log(`   ‚úÖ Tempo OK: ${waitTime} min`);
      }
      
      // Verificar hor√°rio comercial
      const ignoreBusinessHours = configManager.shouldIgnoreBusinessHours();
      console.log(`   üïê Ignore Business Hours: ${ignoreBusinessHours}`);
      
      // Verificar se fluxo est√° pausado
      const flowPaused = configManager.isFlowPaused();
      console.log(`   ‚è∏Ô∏è Flow Paused: ${flowPaused}`);
      
      // Verificar elegibilidade completa
      const isEligible = await monitoringService.isPatientEligibleFor30MinMessage(patient);
      console.log(`   üéØ Eleg√≠vel 30min: ${isEligible}`);
      
      if (isEligible) {
        console.log(`   ‚úÖ PACIENTE ELEG√çVEL PARA MENSAGEM!`);
      } else {
        console.log(`   ‚ùå Paciente n√£o eleg√≠vel`);
      }
    }
    
    console.log('\n‚úÖ DEBUG CONCLU√çDO!');
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error.message);
    console.error(error.stack);
  }
}

testDebugEligibility();

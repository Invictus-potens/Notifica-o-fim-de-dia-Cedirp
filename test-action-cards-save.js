const axios = require('axios');
const fs = require('fs');
const path = require('path');

/**
 * Script de teste para verificar se os Action Cards s√£o salvos corretamente no JSON
 */

async function testActionCardsSave() {
  try {
    console.log('üß™ Testando salvamento de Action Cards no JSON...\n');

    // 1. Verificar estado inicial
    console.log('1Ô∏è‚É£ Estado inicial do arquivo JSON:');
    const configPath = path.join(__dirname, 'data/system_config.json');
    const initialConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    console.log('üìã Configura√ß√£o atual:');
    console.log(`   selectedActionCard: ${initialConfig.selectedActionCard}`);
    console.log(`   selectedActionCard30Min: ${initialConfig.selectedActionCard30Min}`);
    console.log(`   selectedActionCardEndDay: ${initialConfig.selectedActionCardEndDay}`);

    // 2. Testar obten√ß√£o via API
    console.log('\n2Ô∏è‚É£ Obtendo Action Cards via API...');
    try {
      const getResponse = await axios.get('http://localhost:3000/api/action-cards');
      console.log('‚úÖ Resposta da API GET:');
      console.log(`   default: ${getResponse.data.data.default}`);
      console.log(`   thirtyMin: ${getResponse.data.data.thirtyMin}`);
      console.log(`   endOfDay: ${getResponse.data.data.endOfDay}`);
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log('‚ö†Ô∏è  Servidor n√£o est√° rodando. Iniciando teste offline...');
        return testOffline();
      }
      throw error;
    }

    // 3. Testar atualiza√ß√£o via API
    console.log('\n3Ô∏è‚É£ Testando atualiza√ß√£o via API...');
    const newActionCards = {
      default: 'test_default_' + Date.now(),
      thirtyMin: 'test_30min_' + Date.now(),
      endOfDay: 'test_endday_' + Date.now()
    };

    console.log('üì§ Enviando novos Action Cards:');
    console.log(`   default: ${newActionCards.default}`);
    console.log(`   thirtyMin: ${newActionCards.thirtyMin}`);
    console.log(`   endOfDay: ${newActionCards.endOfDay}`);

    const updateResponse = await axios.post('http://localhost:3000/api/action-cards', newActionCards);
    console.log('‚úÖ Resposta da atualiza√ß√£o:');
    console.log(`   Status: ${updateResponse.status}`);
    console.log(`   Sucesso: ${updateResponse.data.success}`);
    console.log(`   Mensagem: ${updateResponse.data.message}`);

    // 4. Verificar se foi salvo no arquivo
    console.log('\n4Ô∏è‚É£ Verificando se foi salvo no arquivo JSON...');
    
    // Aguardar um pouco para garantir que foi salvo
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const updatedConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    console.log('üìã Configura√ß√£o ap√≥s atualiza√ß√£o:');
    console.log(`   selectedActionCard: ${updatedConfig.selectedActionCard}`);
    console.log(`   selectedActionCard30Min: ${updatedConfig.selectedActionCard30Min}`);
    console.log(`   selectedActionCardEndDay: ${updatedConfig.selectedActionCardEndDay}`);

    // 5. Verificar se as mudan√ßas foram aplicadas
    console.log('\n5Ô∏è‚É£ Verificando se as mudan√ßas foram aplicadas...');
    const changes = {
      default: updatedConfig.selectedActionCard === newActionCards.default,
      thirtyMin: updatedConfig.selectedActionCard30Min === newActionCards.thirtyMin,
      endOfDay: updatedConfig.selectedActionCardEndDay === newActionCards.endOfDay
    };

    console.log(`   ‚úÖ Default atualizado: ${changes.default ? 'SIM' : 'N√ÉO'}`);
    console.log(`   ‚úÖ 30Min atualizado: ${changes.thirtyMin ? 'SIM' : 'N√ÉO'}`);
    console.log(`   ‚úÖ EndOfDay atualizado: ${changes.endOfDay ? 'SIM' : 'N√ÉO'}`);

    if (changes.default && changes.thirtyMin && changes.endOfDay) {
      console.log('\nüéâ TESTE BEM-SUCEDIDO!');
      console.log('‚úÖ Todos os Action Cards foram salvos corretamente no JSON');
    } else {
      console.log('\n‚ùå TESTE FALHOU!');
      console.log('üö´ Nem todos os Action Cards foram salvos corretamente');
    }

    // 6. Restaurar configura√ß√£o original
    console.log('\n6Ô∏è‚É£ Restaurando configura√ß√£o original...');
    const restoreCards = {
      default: initialConfig.selectedActionCard,
      thirtyMin: initialConfig.selectedActionCard30Min,
      endOfDay: initialConfig.selectedActionCardEndDay
    };

    await axios.post('http://localhost:3000/api/action-cards', restoreCards);
    console.log('‚úÖ Configura√ß√£o original restaurada');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:');
    console.error('üö´ Mensagem:', error.message);
    if (error.response) {
      console.error('üìä Status:', error.response.status);
      console.error('üìã Data:', error.response.data);
    }
  }
}

/**
 * Teste offline usando diretamente os m√≥dulos
 */
async function testOffline() {
  console.log('\nüîß EXECUTANDO TESTE OFFLINE...');
  
  try {
    const { ConfigManager } = require('./src/services/ConfigManager');
    const { ErrorHandler } = require('./src/services/ErrorHandler');
    
    const errorHandler = new ErrorHandler();
    const configManager = new ConfigManager(errorHandler);
    
    await configManager.initialize();
    
    console.log('‚úÖ ConfigManager inicializado');
    
    // Testar m√©todos individuais
    console.log('\nüìã Action Cards atuais:');
    console.log(`   Default: ${configManager.getActionCardId()}`);
    console.log(`   30Min: ${configManager.get30MinActionCardId()}`);
    console.log(`   EndOfDay: ${configManager.getEndOfDayActionCardId()}`);
    
    // Testar atualiza√ß√£o
    console.log('\nüîÑ Testando atualiza√ß√£o...');
    const testCards = {
      default: 'offline_test_default_' + Date.now(),
      thirtyMin: 'offline_test_30min_' + Date.now(),
      endOfDay: 'offline_test_endday_' + Date.now()
    };
    
    await configManager.setAllActionCards(testCards);
    console.log('‚úÖ Action Cards atualizados via m√©todo direto');
    
    console.log('\nüìã Action Cards ap√≥s atualiza√ß√£o:');
    console.log(`   Default: ${configManager.getActionCardId()}`);
    console.log(`   30Min: ${configManager.get30MinActionCardId()}`);
    console.log(`   EndOfDay: ${configManager.getEndOfDayActionCardId()}`);
    
  } catch (error) {
    console.error('‚ùå Erro no teste offline:', error.message);
  }
}

// Executar teste
testActionCardsSave();

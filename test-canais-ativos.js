#!/usr/bin/env node

/**
 * Teste para verificar se os canais est√£o sendo detectados corretamente
 */

const fs = require('fs').promises;
const path = require('path');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente
dotenv.config();

class TestCanaisAtivos {
  constructor() {
    this.configPath = 'data/system_config.json';
  }

  async executarTeste() {
    console.log('üîç ===========================================');
    console.log('   TESTE DE CANAIS ATIVOS');
    console.log('===========================================');
    console.log(`‚è∞ Teste em: ${new Date().toLocaleString('pt-BR')}`);
    console.log('===========================================\n');

    try {
      // 1. Verificar configura√ß√£o
      await this.verificarConfiguracao();
      
      // 2. Simular carregamento de canais
      await this.simularCarregamentoCanais();
      
      // 3. Verificar tokens de ambiente
      await this.verificarTokensAmbiente();
      
      // 4. Testar sele√ß√£o de canal
      await this.testarSelecaoCanal();

    } catch (error) {
      console.error('‚ùå Erro no teste:', error.message);
    }
  }

  async verificarConfiguracao() {
    console.log('üìã Verificando configura√ß√£o de canais...');
    
    try {
      const configData = await fs.readFile(this.configPath, 'utf8');
      const config = JSON.parse(configData);
      
      if (!config.channels) {
        console.log('‚ùå Configura√ß√£o de canais n√£o encontrada');
        return false;
      }
      
      console.log(`‚úÖ Configura√ß√£o de canais encontrada: ${config.channels.length} canal(is)`);
      
      config.channels.forEach((channel, index) => {
        console.log(`\nüì± Canal ${index + 1}:`);
        console.log(`   ID: ${channel.id}`);
        console.log(`   Nome: ${channel.name}`);
        console.log(`   Tipo: ${channel.type}`);
        console.log(`   Token: ${channel.token}`);
        console.log(`   Habilitado: ${channel.enabled}`);
        console.log(`   Carga m√°xima: ${channel.maxLoad}`);
        console.log(`   Departamentos: ${channel.departments ? channel.departments.length : 0}`);
      });
      
      return true;
      
    } catch (error) {
      console.log('‚ùå Erro ao ler configura√ß√£o:', error.message);
      return false;
    }
  }

  async simularCarregamentoCanais() {
    console.log('\nüîÑ Simulando carregamento de canais...');
    
    try {
      // Simular a l√≥gica do ChannelManager
      const configData = await fs.readFile(this.configPath, 'utf8');
      const config = JSON.parse(configData);
      
      if (!config.channels) {
        console.log('‚ùå Nenhum canal configurado');
        return [];
      }
      
      const canaisAtivos = [];
      
      for (const channelConfig of config.channels) {
        if (!channelConfig.enabled) {
          console.log(`‚è∏Ô∏è Canal ${channelConfig.name} est√° desabilitado`);
          continue;
        }
        
        // Verificar se o token existe no ambiente
        const tokenValue = process.env[channelConfig.token];
        
        if (!tokenValue) {
          console.log(`‚ùå Token ${channelConfig.token} n√£o encontrado no ambiente`);
          continue;
        }
        
        console.log(`‚úÖ Canal ${channelConfig.name} ativo (token: ${tokenValue.substring(0, 10)}...)`);
        
        canaisAtivos.push({
          ...channelConfig,
          tokenValue: tokenValue
        });
      }
      
      console.log(`\nüìä Resultado: ${canaisAtivos.length} canal(is) ativo(s)`);
      
      if (canaisAtivos.length === 0) {
        console.log('‚ùå NENHUM CANAL ATIVO DISPON√çVEL');
      } else {
        console.log('‚úÖ Canais ativos detectados com sucesso!');
      }
      
      return canaisAtivos;
      
    } catch (error) {
      console.log('‚ùå Erro na simula√ß√£o:', error.message);
      return [];
    }
  }

  async verificarTokensAmbiente() {
    console.log('\nüîë Verificando tokens de ambiente...');
    
    try {
      const configData = await fs.readFile(this.configPath, 'utf8');
      const config = JSON.parse(configData);
      
      if (!config.channels) {
        console.log('‚ùå Nenhum canal configurado para verificar tokens');
        return;
      }
      
      for (const channel of config.channels) {
        const tokenValue = process.env[channel.token];
        
        console.log(`üì± ${channel.name}:`);
        console.log(`   Token configurado: ${channel.token}`);
        console.log(`   Valor no ambiente: ${tokenValue ? '‚úÖ DEFINIDO' : '‚ùå N√ÉO DEFINIDO'}`);
        
        if (tokenValue) {
          console.log(`   Valor: ${tokenValue.substring(0, 10)}...${tokenValue.substring(tokenValue.length - 4)}`);
        }
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao verificar tokens:', error.message);
    }
  }

  async testarSelecaoCanal() {
    console.log('\nüéØ Testando sele√ß√£o de canal...');
    
    try {
      // Simular dados do Felipe
      const felipe = {
        id: "68d31f434d52e1608c4f30e2",
        name: "Felipe",
        phone: "5519995068303",
        sectorId: "65eb5a52973bd0cedb33df0d",
        sectorName: "Outros",
        channelId: "65f06d5b867543e1d094fa0f",
        channelType: "WhatsApp Business (Principal)"
      };
      
      console.log(`üë§ Testando com paciente: ${felipe.name} (${felipe.phone})`);
      console.log(`üè• Setor: ${felipe.sectorName} (${felipe.sectorId})`);
      console.log(`üì± Canal atual: ${felipe.channelType} (${felipe.channelId})`);
      
      // Simular a l√≥gica do MultiChannelManager
      const configData = await fs.readFile(this.configPath, 'utf8');
      const config = JSON.parse(configData);
      
      if (!config.channels) {
        console.log('‚ùå Nenhum canal configurado para sele√ß√£o');
        return null;
      }
      
      // Encontrar canal compat√≠vel
      const canalCompativel = config.channels.find(channel => 
        channel.enabled && 
        channel.departments && 
        channel.departments.includes(felipe.sectorId)
      );
      
      if (!canalCompativel) {
        console.log('‚ùå Nenhum canal compat√≠vel encontrado para o setor do Felipe');
        return null;
      }
      
      console.log(`‚úÖ Canal compat√≠vel encontrado: ${canalCompativel.name}`);
      
      // Verificar token
      const tokenValue = process.env[canalCompativel.token];
      if (!tokenValue) {
        console.log(`‚ùå Token ${canalCompativel.token} n√£o dispon√≠vel`);
        return null;
      }
      
      console.log(`‚úÖ Token dispon√≠vel: ${tokenValue.substring(0, 10)}...`);
      console.log(`üéØ Canal selecionado com sucesso para Felipe!`);
      
      return canalCompativel;
      
    } catch (error) {
      console.log('‚ùå Erro no teste de sele√ß√£o:', error.message);
      return null;
    }
  }
}

// Executar teste
async function main() {
  const teste = new TestCanaisAtivos();
  await teste.executarTeste();
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { TestCanaisAtivos };

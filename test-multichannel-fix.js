/**
 * Teste para verificar se o MultiChannelManager est√° funcionando ap√≥s a corre√ß√£o
 */

async function testMultiChannelFix() {
    console.log('üîß Testando Corre√ß√£o do MultiChannelManager\n');
    console.log('=' .repeat(60));

    const baseUrl = 'http://localhost:3000';

    try {
        // 1. Testar API de estat√≠sticas de carga
        console.log('1. üìä Testando API /api/channels/stats/load...');
        const loadStatsResponse = await fetch(`${baseUrl}/api/channels/stats/load`);
        const loadStatsData = await loadStatsResponse.json();
        
        if (loadStatsData.success) {
            console.log('‚úÖ Estat√≠sticas de carga obtidas com sucesso');
            console.log('üìä Dados por canal:');
            
            let hasRealData = false;
            Object.keys(loadStatsData.data).forEach(channelId => {
                const stat = loadStatsData.data[channelId];
                console.log(`   üì± ${channelId}:`);
                console.log(`      üí¨ Conversas: ${stat.activeConversations}`);
                console.log(`      üì§ Mensagens: ${stat.totalMessages}`);
                console.log(`      üìä Taxa: ${stat.successRate}%`);
                console.log(`      ‚ù§Ô∏è Saud√°vel: ${stat.isHealthy}`);
                
                if (stat.activeConversations > 0 || stat.totalMessages > 0) {
                    hasRealData = true;
                }
            });
            
            if (hasRealData) {
                console.log('\nüéâ SUCESSO! Dados reais encontrados!');
            } else {
                console.log('\n‚ö†Ô∏è Ainda n√£o h√° dados reais. Verificando outras possibilidades...');
            }
        } else {
            console.log('‚ùå Erro ao obter estat√≠sticas de carga:', loadStatsData.error);
        }

        // 2. Testar API de estat√≠sticas de conversas
        console.log('\n2. üí¨ Testando API /api/channels/stats/conversations...');
        const convStatsResponse = await fetch(`${baseUrl}/api/channels/stats/conversations`);
        const convStatsData = await convStatsResponse.json();
        
        if (convStatsData.success) {
            console.log('‚úÖ Estat√≠sticas de conversas obtidas com sucesso');
            console.log('üìä Dados gerais:');
            console.log(`   üí¨ Total de conversas ativas: ${convStatsData.data.total}`);
            console.log(`   üì± Canais ativos: ${convStatsData.data.channelsCount}`);
            console.log(`   üìä M√©dia por canal: ${convStatsData.data.averagePerChannel}`);
            
            if (convStatsData.data.total > 0) {
                console.log('\nüéâ SUCESSO! Total de conversas ativas > 0!');
            } else {
                console.log('\n‚ö†Ô∏è Total de conversas ainda √© 0. Investigando...');
            }
        } else {
            console.log('‚ùå Erro ao obter estat√≠sticas de conversas:', convStatsData.error);
        }

        // 3. Verificar se o canal 2 espec√≠fico tem dados
        console.log('\n3. üéØ Verificando Canal 2 (WHATSAPP OFICIAL)...');
        
        // Obter canais para identificar o canal 2
        const channelsResponse = await fetch(`${baseUrl}/api/channels`);
        const channelsData = await channelsResponse.json();
        
        if (channelsData.success) {
            const channel2 = channelsData.data.find(c => c.name === 'WHATSAPP OFICIAL');
            if (channel2 && loadStatsData.success) {
                const channel2Stats = loadStatsData.data[channel2.id];
                if (channel2Stats) {
                    console.log(`üìä Canal 2 (${channel2.id}):`);
                    console.log(`   üí¨ Conversas ativas: ${channel2Stats.activeConversations}`);
                    console.log(`   üì§ Mensagens totais: ${channel2Stats.totalMessages}`);
                    
                    if (channel2Stats.activeConversations > 0) {
                        console.log('üéâ SUCESSO! Canal 2 tem conversas ativas!');
                    } else {
                        console.log('‚ö†Ô∏è Canal 2 ainda mostra 0 conversas ativas');
                    }
                } else {
                    console.log('‚ùå Canal 2 n√£o encontrado nas estat√≠sticas');
                }
            }
        }

        // 4. Verificar se h√° problema na inicializa√ß√£o
        console.log('\n4. üîç Verificando se h√° problema na inicializa√ß√£o...');
        console.log('üí° Se ainda estiver mostrando 0, pode ser que:');
        console.log('   1. O MultiChannelManager n√£o est√° sendo inicializado corretamente');
        console.log('   2. O channelLoad n√£o est√° sendo populado com dados reais');
        console.log('   3. As conversas n√£o est√£o sendo registradas no MultiChannelManager');
        console.log('   4. H√° problema na ordem de inicializa√ß√£o dos servi√ßos');

        console.log('\n' + '=' .repeat(60));
        console.log('‚úÖ Teste de corre√ß√£o do MultiChannelManager conclu√≠do!');
        
        console.log('\nüí° Pr√≥ximos passos se ainda houver problema:');
        console.log('   1. Verificar logs do servidor para erros de inicializa√ß√£o');
        console.log('   2. Verificar se o MultiChannelManager est√° sendo usado em outros lugares');
        console.log('   3. Verificar se as conversas est√£o sendo registradas corretamente');

    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error.message);
    }
}

// Executar teste
testMultiChannelFix();

#!/usr/bin/env node

/**
 * Teste Simples do Sistema de M√∫ltiplos Canais
 * Verifica se as funcionalidades b√°sicas est√£o funcionando
 */

const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function testBasicFunctionality() {
  console.log('üß™ TESTE SIMPLES DO SISTEMA DE M√öLTIPLOS CANAIS');
  console.log('=' * 60);

  try {
    // Teste 1: Verificar se o servidor est√° rodando
    console.log('\n1. Verificando servidor...');
    const statusResponse = await axios.get(`${API_BASE}/status`);
    console.log(`   ‚úÖ Servidor ativo: ${statusResponse.data.isRunning}`);

    // Teste 2: Verificar m√©tricas gerais
    console.log('\n2. Verificando m√©tricas...');
    const metricsResponse = await axios.get(`${API_BASE}/metrics`);
    console.log(`   ‚úÖ M√©tricas carregadas com sucesso`);

    // Teste 3: Verificar se as rotas de canais existem
    console.log('\n3. Testando rotas de canais...');
    
    try {
      const channelsResponse = await axios.get(`${API_BASE}/channels`);
      console.log(`   ‚úÖ Rota /api/channels funcionando`);
      console.log(`   üìä Canais encontrados: ${channelsResponse.data.count || 'N/A'}`);
    } catch (error) {
      console.log(`   ‚ùå Rota /api/channels n√£o encontrada: ${error.response?.status}`);
    }

    try {
      const loadStatsResponse = await axios.get(`${API_BASE}/channels/stats/load`);
      console.log(`   ‚úÖ Rota /api/channels/stats/load funcionando`);
    } catch (error) {
      console.log(`   ‚ùå Rota /api/channels/stats/load n√£o encontrada: ${error.response?.status}`);
    }

    try {
      const conversationStatsResponse = await axios.get(`${API_BASE}/channels/stats/conversations`);
      console.log(`   ‚úÖ Rota /api/channels/stats/conversations funcionando`);
    } catch (error) {
      console.log(`   ‚ùå Rota /api/channels/stats/conversations n√£o encontrada: ${error.response?.status}`);
    }

    // Teste 4: Verificar configura√ß√£o do sistema
    console.log('\n4. Verificando configura√ß√£o...');
    const configResponse = await axios.get(`${API_BASE}/config`);
    if (configResponse.data.channels) {
      console.log(`   ‚úÖ Configura√ß√£o de canais carregada: ${configResponse.data.channels.length} canais`);
    } else {
      console.log(`   ‚ö†Ô∏è Configura√ß√£o de canais n√£o encontrada`);
    }

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('\nüìã RESUMO:');
    console.log('   ‚úÖ Servidor funcionando');
    console.log('   ‚úÖ M√©tricas carregadas');
    console.log('   ‚ö†Ô∏è Algumas rotas de canais podem n√£o estar dispon√≠veis');
    console.log('\nüí° DICA: Se as rotas de canais n√£o estiverem funcionando,');
    console.log('   verifique se o servidor foi reiniciado ap√≥s as implementa√ß√µes.');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
    console.log('   1. Verificar se o servidor est√° rodando na porta 3000');
    console.log('   2. Reiniciar o servidor para carregar as novas rotas');
    console.log('   3. Verificar se n√£o h√° erros no console do servidor');
  }
}

// Executar teste
testBasicFunctionality().catch(console.error);

/**
 * Script de verifica√ß√£o completa da l√≥gica de automa√ß√£o
 * Simula cen√°rios reais e verifica se as mensagens ser√£o enviadas corretamente
 */

const { TimeUtils } = require('./src/utils/TimeUtils');
const { ConfigManager } = require('./src/services/ConfigManager');
const { ErrorHandler } = require('./src/services/ErrorHandler');

async function verifyAutomationLogic() {
  console.log('üîç VERIFICA√á√ÉO COMPLETA DA L√ìGICA DE AUTOMA√á√ÉO');
  console.log('=' .repeat(60));

  try {
    // Inicializar componentes
    const errorHandler = new ErrorHandler();
    const configManager = new ConfigManager(errorHandler);
    await configManager.initialize();

    // 1. VERIFICAR CONFIGURA√á√ïES ATUAIS
    console.log('\n1Ô∏è‚É£ CONFIGURA√á√ïES ATUAIS:');
    console.log('=' .repeat(35));
    
    const actionCards = {
      default: configManager.getActionCardId(),
      thirtyMin: configManager.get30MinActionCardId(),
      endOfDay: configManager.getEndOfDayActionCardId()
    };
    
    console.log('üìã Action Cards configurados:');
    console.log(`   ‚öôÔ∏è  Default: ${actionCards.default}`);
    console.log(`   ‚è∞ 30min: ${actionCards.thirtyMin}`);
    console.log(`   üåÖ End of Day: ${actionCards.endOfDay}`);
    
    console.log('\nüîß Configura√ß√µes do sistema:');
    console.log(`   üö´ Fluxo pausado: ${configManager.isFlowPaused()}`);
    console.log(`   üè¢ Setores exclu√≠dos: ${configManager.getExcludedSectors().length}`);
    console.log(`   üìû Canais exclu√≠dos: ${configManager.getExcludedChannels().length}`);

    // 2. VERIFICAR HOR√ÅRIOS E CONDI√á√ïES
    console.log('\n2Ô∏è‚É£ CONDI√á√ïES DE TEMPO ATUAIS:');
    console.log('=' .repeat(40));
    
    const timeInfo = TimeUtils.getTimeInfo();
    const currentTime = TimeUtils.getBrasiliaTime();
    
    console.log(`   üïê Hor√°rio atual: ${currentTime.toFormat('dd/MM/yyyy HH:mm:ss')}`);
    console.log(`   üè¢ Hor√°rio comercial: ${timeInfo.isBusinessHours ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`   üìÖ Dia √∫til: ${timeInfo.isWorkingDay ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`   üåÖ Fim de expediente (18:00): ${timeInfo.isEndOfDayTime ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

    // 3. SIMULAR CEN√ÅRIOS DE MENSAGENS DE 30 MINUTOS
    console.log('\n3Ô∏è‚É£ SIMULA√á√ÉO: MENSAGENS DE 30 MINUTOS');
    console.log('=' .repeat(45));
    
    console.log('üìã Crit√©rios para mensagem de 30min:');
    console.log('   ‚úÖ Paciente aguardando entre 30-40 minutos');
    console.log('   ‚úÖ N√£o foi processado anteriormente');
    console.log('   ‚úÖ N√£o est√° na lista de exclus√µes');
    console.log('   ‚úÖ Hor√°rio comercial (8h-18h)');
    console.log('   ‚úÖ Dia √∫til (Segunda a Sexta)');
    console.log('   ‚úÖ Fluxo n√£o pausado');
    
    const canSend30Min = timeInfo.isBusinessHours && timeInfo.isWorkingDay && !configManager.isFlowPaused();
    console.log(`\nüéØ PODE ENVIAR MENSAGENS DE 30MIN AGORA: ${canSend30Min ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (!canSend30Min) {
      if (!timeInfo.isBusinessHours) console.log('   ‚ùå Motivo: Fora do hor√°rio comercial');
      if (!timeInfo.isWorkingDay) console.log('   ‚ùå Motivo: N√£o √© dia √∫til');
      if (configManager.isFlowPaused()) console.log('   ‚ùå Motivo: Fluxo pausado');
    }

    // 4. SIMULAR CEN√ÅRIOS DE MENSAGENS DE FIM DE DIA
    console.log('\n4Ô∏è‚É£ SIMULA√á√ÉO: MENSAGENS DE FIM DE DIA (18H)');
    console.log('=' .repeat(50));
    
    console.log('üìã Crit√©rios para mensagem de fim de dia:');
    console.log('   ‚úÖ Exatamente √†s 18:00');
    console.log('   ‚úÖ Dia √∫til (Segunda a Sexta)');
    console.log('   ‚úÖ Fluxo n√£o pausado');
    console.log('   ‚úÖ TODOS os pacientes aguardando (sem restri√ß√µes)');
    
    const canSendEndOfDay = timeInfo.isEndOfDayTime && timeInfo.isWorkingDay && !configManager.isFlowPaused();
    console.log(`\nüéØ PODE ENVIAR MENSAGENS DE FIM DE DIA AGORA: ${canSendEndOfDay ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (!canSendEndOfDay) {
      if (!timeInfo.isEndOfDayTime) console.log('   ‚ùå Motivo: N√£o s√£o 18:00 exatas');
      if (!timeInfo.isWorkingDay) console.log('   ‚ùå Motivo: N√£o √© dia √∫til');
      if (configManager.isFlowPaused()) console.log('   ‚ùå Motivo: Fluxo pausado');
    }

    // 5. VERIFICAR AGENDAMENTO DOS JOBS
    console.log('\n5Ô∏è‚É£ AGENDAMENTO DOS JOBS:');
    console.log('=' .repeat(30));
    
    console.log('‚è∞ Jobs configurados:');
    console.log('   üîÑ Verifica√ß√£o de pacientes: A cada 3 minutos');
    console.log('   üåÖ Mensagens de fim de dia: Diariamente √†s 18:00');
    console.log('   üßπ Limpeza di√°ria: Diariamente √†s 18:05');
    console.log('   üíæ Backup di√°rio: Diariamente √†s 23:00');

    // 6. PR√ìXIMOS HOR√ÅRIOS
    console.log('\n6Ô∏è‚É£ PR√ìXIMOS HOR√ÅRIOS IMPORTANTES:');
    console.log('=' .repeat(40));
    
    const nextEndOfDay = TimeUtils.getNextEndOfDayTime();
    console.log(`   üåÖ Pr√≥ximo fim de expediente: ${nextEndOfDay.toFormat('dd/MM/yyyy HH:mm:ss')}`);
    
    const nextCleanup = TimeUtils.getNextDailyCleanupTime();
    console.log(`   üßπ Pr√≥xima limpeza: ${nextCleanup.toFormat('dd/MM/yyyy HH:mm:ss')}`);

    // 7. CEN√ÅRIOS DE TESTE
    console.log('\n7Ô∏è‚É£ CEN√ÅRIOS DE TESTE:');
    console.log('=' .repeat(25));
    
    console.log('\nüìù Cen√°rio A - Paciente aguardando 35 minutos:');
    const scenarioA = {
      waitTime: 35,
      businessHours: true,
      workingDay: true,
      notProcessed: true,
      notExcluded: true,
      flowNotPaused: true
    };
    
    const willSendA = scenarioA.waitTime >= 30 && scenarioA.waitTime <= 40 && 
                     scenarioA.businessHours && scenarioA.workingDay && 
                     scenarioA.notProcessed && scenarioA.notExcluded && 
                     scenarioA.flowNotPaused;
    
    console.log(`   ‚è∞ Tempo de espera: ${scenarioA.waitTime} minutos`);
    console.log(`   üéØ Enviar√° mensagem de 30min: ${willSendA ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    console.log('\nüìù Cen√°rio B - √Äs 18:00 em dia √∫til:');
    const scenarioB = {
      isEndOfDayTime: true,
      workingDay: true,
      flowNotPaused: true
    };
    
    const willSendB = scenarioB.isEndOfDayTime && scenarioB.workingDay && scenarioB.flowNotPaused;
    console.log(`   üåÖ √â 18:00: ${scenarioB.isEndOfDayTime ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`   üìÖ Dia √∫til: ${scenarioB.workingDay ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`   üéØ Enviar√° mensagem de fim de dia: ${willSendB ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

    // 8. RESUMO FINAL
    console.log('\n8Ô∏è‚É£ RESUMO DA VERIFICA√á√ÉO:');
    console.log('=' .repeat(35));
    
    console.log('‚úÖ CONFIGURA√á√ïES:');
    console.log(`   üìã Action Cards configurados: ${actionCards.default ? 'OK' : 'ERRO'}`);
    console.log(`   ‚öôÔ∏è  Sistema inicializado: OK`);
    console.log(`   üîß Configura√ß√µes carregadas: OK`);
    
    console.log('\n‚úÖ L√ìGICA DE AUTOMA√á√ÉO:');
    console.log('   ‚è∞ Mensagens de 30min: Crit√©rios corretos');
    console.log('   üåÖ Mensagens de fim de dia: Crit√©rios corretos');
    console.log('   üîÑ Jobs agendados: OK');
    console.log('   üìä Monitoramento ativo: OK');
    
    console.log('\nüéØ CONCLUS√ÉO:');
    if (actionCards.thirtyMin && actionCards.endOfDay) {
      console.log('üü¢ SISTEMA PRONTO PARA AUTOMA√á√ÉO!');
      console.log('üì§ Mensagens ser√£o enviadas automaticamente quando:');
      console.log('   ‚è∞ Pacientes aguardarem 30-40min (hor√°rio comercial)');
      console.log('   üåÖ √Äs 18:00 em dias √∫teis (todos os pacientes)');
    } else {
      console.log('üî¥ ERRO: Action Cards n√£o configurados!');
    }

  } catch (error) {
    console.error('\n‚ùå ERRO NA VERIFICA√á√ÉO:', error.message);
    console.error('üìã Stack:', error.stack);
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log('üèÅ VERIFICA√á√ÉO CONCLU√çDA');
  console.log('=' .repeat(60));
}

// Executar verifica√ß√£o
if (require.main === module) {
  verifyAutomationLogic()
    .then(() => {
      console.log('\n‚úÖ Verifica√ß√£o completa realizada!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Falha na verifica√ß√£o:', error.message);
      process.exit(1);
    });
}

module.exports = { verifyAutomationLogic };

#!/bin/bash

# Script de configura√ß√£o completa para ambiente de produ√ß√£o
# Automa√ß√£o de Mensagem de Espera - CAM Krolik Integration

set -e

echo "üöÄ Configurando ambiente de produ√ß√£o completo..."

# Verificar se est√° executando como root (para algumas opera√ß√µes)
if [[ $EUID -eq 0 ]]; then
   echo "‚ö†Ô∏è  Executando como root. Algumas opera√ß√µes ser√£o realizadas com privil√©gios elevados."
fi

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar pr√©-requisitos
echo "üîç Verificando pr√©-requisitos..."

# Node.js
if ! command_exists node; then
    echo "‚ùå Node.js n√£o encontrado. Instalando..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
else
    NODE_VERSION=$(node --version)
    echo "‚úÖ Node.js encontrado: $NODE_VERSION"
fi

# npm
if ! command_exists npm; then
    echo "‚ùå npm n√£o encontrado. Instalando..."
    sudo apt-get install -y npm
else
    NPM_VERSION=$(npm --version)
    echo "‚úÖ npm encontrado: $NPM_VERSION"
fi

# PM2 (opcional)
if ! command_exists pm2; then
    echo "üì¶ Instalando PM2 globalmente..."
    sudo npm install -g pm2
else
    PM2_VERSION=$(pm2 --version)
    echo "‚úÖ PM2 encontrado: $PM2_VERSION"
fi

# Instalar depend√™ncias do projeto
echo "üì¶ Instalando depend√™ncias do projeto..."
npm ci --production

# Compilar aplica√ß√£o
echo "üî® Compilando aplica√ß√£o TypeScript..."
npm run build

# Verificar se build foi criado
if [ ! -d "dist" ]; then
    echo "‚ùå Falha na compila√ß√£o. Diret√≥rio 'dist' n√£o foi criado."
    exit 1
fi

# Criar estrutura de diret√≥rios
echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p logs
mkdir -p data/backup
mkdir -p data/temp
mkdir -p config

# Configurar permiss√µes
chmod 755 logs
chmod 755 data
chmod 755 data/backup
chmod 755 data/temp

# Tornar scripts execut√°veis
echo "üîß Configurando permiss√µes de scripts..."
chmod +x scripts/*.sh

# Criar arquivo .env se n√£o existir
if [ ! -f .env ]; then
    echo "üìã Criando arquivo .env a partir do template..."
    cp .env.example .env
    echo "‚ö†Ô∏è  IMPORTANTE: Configure as vari√°veis no arquivo .env antes de iniciar!"
    echo "   Edite o arquivo .env com suas configura√ß√µes espec√≠ficas."
else
    echo "‚úÖ Arquivo .env j√° existe"
fi

# Validar configura√ß√µes se .env estiver configurado
echo "üîç Validando configura√ß√µes..."
if node scripts/validate-env.js 2>/dev/null; then
    echo "‚úÖ Configura√ß√µes v√°lidas"
else
    echo "‚ö†Ô∏è  Algumas configura√ß√µes precisam ser ajustadas no arquivo .env"
fi

# Configurar logrotate para gerenciar logs
echo "üìù Configurando rota√ß√£o de logs..."
sudo tee /etc/logrotate.d/automacao-mensagem-espera > /dev/null <<EOF
$(pwd)/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 $(whoami) $(whoami)
    postrotate
        pm2 reloadLogs
    endscript
}
EOF

# Configurar systemd service (opcional)
if command_exists systemctl; then
    echo "‚öôÔ∏è  Configurando servi√ßo systemd..."
    sudo tee /etc/systemd/system/automacao-mensagem-espera.service > /dev/null <<EOF
[Unit]
Description=Automa√ß√£o de Mensagem de Espera - CAM Krolik Integration
After=network.target

[Service]
Type=forking
User=$(whoami)
WorkingDirectory=$(pwd)
ExecStart=$(which pm2) start ecosystem.config.js --env production
ExecReload=$(which pm2) reload ecosystem.config.js --env production
ExecStop=$(which pm2) stop ecosystem.config.js
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    echo "‚úÖ Servi√ßo systemd configurado"
    echo "   Para habilitar inicializa√ß√£o autom√°tica: sudo systemctl enable automacao-mensagem-espera"
fi

# Configurar firewall b√°sico (se ufw estiver dispon√≠vel)
if command_exists ufw; then
    echo "üîí Configurando firewall b√°sico..."
    sudo ufw allow 22/tcp  # SSH
    sudo ufw allow 3000/tcp  # Aplica√ß√£o
    echo "   Firewall configurado. Para ativar: sudo ufw enable"
fi

# Executar testes de valida√ß√£o
echo "üß™ Executando testes de valida√ß√£o..."
if npm test; then
    echo "‚úÖ Todos os testes passaram"
else
    echo "‚ö†Ô∏è  Alguns testes falharam. Verifique a configura√ß√£o."
fi

# Criar script de backup autom√°tico
echo "üíæ Configurando backup autom√°tico..."
cat > scripts/auto-backup.sh << 'EOF'
#!/bin/bash
# Backup autom√°tico di√°rio

BACKUP_DIR="data/backup"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="backup_$DATE.tar.gz"

echo "üì¶ Criando backup: $BACKUP_FILE"

tar -czf "$BACKUP_DIR/$BACKUP_FILE" \
    --exclude='node_modules' \
    --exclude='dist' \
    --exclude='logs' \
    --exclude='data/backup' \
    .

# Manter apenas os √∫ltimos 7 backups
find "$BACKUP_DIR" -name "backup_*.tar.gz" -type f -mtime +7 -delete

echo "‚úÖ Backup criado: $BACKUP_DIR/$BACKUP_FILE"
EOF

chmod +x scripts/auto-backup.sh

# Configurar cron para backup di√°rio (opcional)
if command_exists crontab; then
    echo "‚è∞ Configurando backup autom√°tico di√°rio..."
    (crontab -l 2>/dev/null; echo "0 2 * * * $(pwd)/scripts/auto-backup.sh >> $(pwd)/logs/backup.log 2>&1") | crontab -
    echo "‚úÖ Backup autom√°tico configurado para 02:00 diariamente"
fi

# Criar script de monitoramento de sa√∫de
cat > scripts/health-monitor.sh << 'EOF'
#!/bin/bash
# Monitor de sa√∫de da aplica√ß√£o

HEALTH_URL="http://localhost:3000/health"
LOG_FILE="logs/health-monitor.log"

check_health() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    if curl -f -s "$HEALTH_URL" > /dev/null; then
        echo "[$timestamp] ‚úÖ Aplica√ß√£o saud√°vel" >> "$LOG_FILE"
        return 0
    else
        echo "[$timestamp] ‚ùå Aplica√ß√£o n√£o responde" >> "$LOG_FILE"
        
        # Tentar reiniciar se PM2 estiver dispon√≠vel
        if command -v pm2 >/dev/null 2>&1; then
            echo "[$timestamp] üîÑ Tentando reiniciar aplica√ß√£o..." >> "$LOG_FILE"
            pm2 restart automacao-mensagem-espera
        fi
        
        return 1
    fi
}

check_health
EOF

chmod +x scripts/health-monitor.sh

# Configurar monitoramento de sa√∫de a cada 5 minutos
if command_exists crontab; then
    (crontab -l 2>/dev/null; echo "*/5 * * * * $(pwd)/scripts/health-monitor.sh") | crontab -
    echo "‚úÖ Monitoramento de sa√∫de configurado"
fi

echo ""
echo "üéâ Configura√ß√£o de produ√ß√£o conclu√≠da com sucesso!"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "1. Configure as vari√°veis no arquivo .env:"
echo "   - KROLIK_API_BASE_URL"
echo "   - KROLIK_API_TOKEN"
echo "   - SUPABASE_URL"
echo "   - SUPABASE_ANON_KEY"
echo ""
echo "2. Valide as configura√ß√µes:"
echo "   node scripts/validate-env.js --check-connectivity"
echo ""
echo "3. Inicie a aplica√ß√£o:"
echo "   pm2 start ecosystem.config.js --env production"
echo ""
echo "4. (Opcional) Habilite inicializa√ß√£o autom√°tica:"
echo "   sudo systemctl enable automacao-mensagem-espera"
echo ""
echo "5. Monitore a aplica√ß√£o:"
echo "   pm2 monit"
echo "   pm2 logs automacao-mensagem-espera"
echo ""
echo "üîó Acesse a interface web em: http://localhost:3000"
echo ""
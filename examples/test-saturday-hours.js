/**
 * Script de teste para validar a funcionalidade de hor√°rios de s√°bado
 * Este script testa se a l√≥gica de hor√°rios comerciais est√° funcionando corretamente
 * para diferentes cen√°rios de s√°bados e dias √∫teis.
 */

const { ConfigManager } = require('../src/services/ConfigManager');
const { ErrorHandler } = require('../src/services/ErrorHandler');

class SaturdayHoursTest {
    constructor() {
        this.errorHandler = new ErrorHandler();
        this.configManager = new ConfigManager(this.errorHandler);
        this.testResults = [];
    }

    async runTests() {
        console.log('üß™ Iniciando testes de hor√°rios de s√°bado...\n');

        await this.configManager.initialize();

        // Teste 1: Verificar se as configura√ß√µes padr√£o est√£o corretas
        await this.testDefaultConfigurations();

        // Teste 2: Verificar se as fun√ß√µes getter funcionam
        await this.testGetterFunctions();

        // Teste 3: Verificar se a persist√™ncia funciona
        await this.testPersistence();

        // Teste 4: Verificar se a l√≥gica de hor√°rios comerciais funciona
        await this.testBusinessHoursLogic();

        this.printResults();
    }

    async testDefaultConfigurations() {
        console.log('üìã Teste 1: Configura√ß√µes Padr√£o');
        
        const config = this.configManager.getSystemConfig();
        
        const tests = [
            {
                name: 'saturdayStartTime padr√£o',
                expected: '08:00',
                actual: config.saturdayStartTime,
                pass: config.saturdayStartTime === '08:00'
            },
            {
                name: 'saturdayEndTime padr√£o',
                expected: '12:00',
                actual: config.saturdayEndTime,
                pass: config.saturdayEndTime === '12:00'
            }
        ];

        tests.forEach(test => {
            this.addTestResult('Default Configurations', test.name, test.pass, test.expected, test.actual);
        });

        console.log('‚úÖ Teste 1 conclu√≠do\n');
    }

    async testGetterFunctions() {
        console.log('üîß Teste 2: Fun√ß√µes Getter');
        
        const tests = [
            {
                name: 'getSaturdayStartTime()',
                expected: '08:00',
                actual: this.configManager.getSaturdayStartTime(),
                pass: this.configManager.getSaturdayStartTime() === '08:00'
            },
            {
                name: 'getSaturdayEndTime()',
                expected: '12:00',
                actual: this.configManager.getSaturdayEndTime(),
                pass: this.configManager.getSaturdayEndTime() === '12:00'
            }
        ];

        tests.forEach(test => {
            this.addTestResult('Getter Functions', test.name, test.pass, test.expected, test.actual);
        });

        console.log('‚úÖ Teste 2 conclu√≠do\n');
    }

    async testPersistence() {
        console.log('üíæ Teste 3: Persist√™ncia de Dados');
        
        try {
            // Atualizar configura√ß√µes
            await this.configManager.updateSystemConfig({
                saturdayStartTime: '09:00',
                saturdayEndTime: '13:00'
            });

            // Verificar se foram salvas
            const config = this.configManager.getSystemConfig();
            
            const tests = [
                {
                    name: 'saturdayStartTime persistido',
                    expected: '09:00',
                    actual: config.saturdayStartTime,
                    pass: config.saturdayStartTime === '09:00'
                },
                {
                    name: 'saturdayEndTime persistido',
                    expected: '13:00',
                    actual: config.saturdayEndTime,
                    pass: config.saturdayEndTime === '13:00'
                }
            ];

            tests.forEach(test => {
                this.addTestResult('Persistence', test.name, test.pass, test.expected, test.actual);
            });

            // Restaurar valores padr√£o
            await this.configManager.updateSystemConfig({
                saturdayStartTime: '08:00',
                saturdayEndTime: '12:00'
            });

            console.log('‚úÖ Teste 3 conclu√≠do\n');
        } catch (error) {
            this.addTestResult('Persistence', 'Erro na persist√™ncia', false, 'Sucesso', error.message);
            console.log('‚ùå Teste 3 falhou:', error.message, '\n');
        }
    }

    async testBusinessHoursLogic() {
        console.log('üïê Teste 4: L√≥gica de Hor√°rios Comerciais');
        
        // Simular diferentes hor√°rios e dias
        const testCases = [
            {
                dayOfWeek: 6, // S√°bado
                hour: 9,
                expected: false, // Dentro do hor√°rio comercial de s√°bado
                description: 'S√°bado 09:00 (dentro do hor√°rio)'
            },
            {
                dayOfWeek: 6, // S√°bado
                hour: 14,
                expected: true, // Fora do hor√°rio comercial de s√°bado
                description: 'S√°bado 14:00 (fora do hor√°rio)'
            },
            {
                dayOfWeek: 1, // Segunda-feira
                hour: 9,
                expected: false, // Dentro do hor√°rio comercial normal
                description: 'Segunda-feira 09:00 (dentro do hor√°rio)'
            },
            {
                dayOfWeek: 1, // Segunda-feira
                hour: 19,
                expected: true, // Fora do hor√°rio comercial normal
                description: 'Segunda-feira 19:00 (fora do hor√°rio)'
            }
        ];

        testCases.forEach(testCase => {
            // Simular a l√≥gica de hor√°rios comerciais
            let startHour, endHour;
            let isOutsideBusinessHours = false;

            if (testCase.dayOfWeek === 6) { // S√°bado
                startHour = parseInt(this.configManager.getSaturdayStartTime().split(':')[0]);
                endHour = parseInt(this.configManager.getSaturdayEndTime().split(':')[0]);
            } else {
                startHour = parseInt(this.configManager.getStartOfDayTime().split(':')[0]);
                endHour = parseInt(this.configManager.getEndOfDayTime().split(':')[0]);
            }

            isOutsideBusinessHours = testCase.hour < startHour || testCase.hour >= endHour;
            
            const pass = isOutsideBusinessHours === testCase.expected;
            
            this.addTestResult(
                'Business Hours Logic', 
                testCase.description, 
                pass, 
                testCase.expected ? 'Fora do hor√°rio' : 'Dentro do hor√°rio',
                isOutsideBusinessHours ? 'Fora do hor√°rio' : 'Dentro do hor√°rio'
            );
        });

        console.log('‚úÖ Teste 4 conclu√≠do\n');
    }

    addTestResult(category, testName, pass, expected, actual) {
        this.testResults.push({
            category,
            testName,
            pass,
            expected,
            actual
        });
    }

    printResults() {
        console.log('üìä RESULTADOS DOS TESTES\n');
        console.log('='.repeat(80));

        const categories = [...new Set(this.testResults.map(r => r.category))];
        
        categories.forEach(category => {
            console.log(`\nüìÇ ${category}:`);
            console.log('-'.repeat(50));
            
            const categoryTests = this.testResults.filter(r => r.category === category);
            
            categoryTests.forEach(test => {
                const status = test.pass ? '‚úÖ PASSOU' : '‚ùå FALHOU';
                console.log(`${status} ${test.testName}`);
                if (!test.pass) {
                    console.log(`   Esperado: ${test.expected}`);
                    console.log(`   Obtido: ${test.actual}`);
                }
            });
        });

        const totalTests = this.testResults.length;
        const passedTests = this.testResults.filter(r => r.pass).length;
        const failedTests = totalTests - passedTests;

        console.log('\n' + '='.repeat(80));
        console.log(`üìà RESUMO: ${passedTests}/${totalTests} testes passaram`);
        
        if (failedTests > 0) {
            console.log(`‚ùå ${failedTests} testes falharam`);
        } else {
            console.log('üéâ Todos os testes passaram! A funcionalidade de hor√°rios de s√°bado est√° funcionando corretamente!');
        }
    }
}

// Executar testes se o script for chamado diretamente
if (require.main === module) {
    const tester = new SaturdayHoursTest();
    tester.runTests().catch(console.error);
}

module.exports = { SaturdayHoursTest };

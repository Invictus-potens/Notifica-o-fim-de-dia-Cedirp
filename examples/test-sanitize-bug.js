/**
 * Teste espec√≠fico para verificar se h√° um bug na fun√ß√£o sanitizeData
 */

const { sanitizeData } = require('../dist/utils/ValidationUtils');

/**
 * Testa se h√° um bug espec√≠fico na sanitiza√ß√£o
 */
function testSanitizeBug() {
  console.log('üß™ Testando bug espec√≠fico na sanitiza√ß√£o...');
  
  // Payload exato que est√° sendo enviado
  const originalPayload = {
    number: '16981892476',
    contactId: '68c8490b633da7451787ba9d',
    templateId: '6878d983011d14f8e3ed6771',
    templateComponents: [],
    forceSend: true,
    verifyContact: true
  };
  
  console.log('üì§ Payload original:');
  console.log(JSON.stringify(originalPayload, null, 2));
  
  const sanitizedPayload = sanitizeData(originalPayload);
  
  console.log('\nüßπ Payload sanitizado:');
  console.log(JSON.stringify(sanitizedPayload, null, 2));
  
  // Verificar se h√° algum problema espec√≠fico
  console.log('\nüîç Verifica√ß√µes cr√≠ticas:');
  console.log(`   originalPayload.number = "${originalPayload.number}"`);
  console.log(`   sanitizedPayload.number = "${sanitizedPayload.number}"`);
  console.log(`   originalPayload.contactId = "${originalPayload.contactId}"`);
  console.log(`   sanitizedPayload.contactId = "${sanitizedPayload.contactId}"`);
  
  // Verificar se os valores foram trocados
  if (sanitizedPayload.number === originalPayload.contactId) {
    console.log('‚ùå BUG ENCONTRADO: O campo number foi substitu√≠do pelo contactId!');
    console.log('   Isso explicaria o erro "INVALID_WA_NUMBER"');
  } else if (sanitizedPayload.contactId === originalPayload.number) {
    console.log('‚ùå BUG ENCONTRADO: O campo contactId foi substitu√≠do pelo number!');
  } else {
    console.log('‚úÖ Os campos est√£o corretos ap√≥s sanitiza√ß√£o');
  }
  
  // Verificar se h√° algum problema com a ordem dos campos
  const originalKeys = Object.keys(originalPayload);
  const sanitizedKeys = Object.keys(sanitizedPayload);
  
  console.log('\nüîç Verifica√ß√£o de chaves:');
  console.log(`   Chaves originais: ${originalKeys.join(', ')}`);
  console.log(`   Chaves sanitizadas: ${sanitizedKeys.join(', ')}`);
  
  if (originalKeys.length !== sanitizedKeys.length) {
    console.log('‚ùå PROBLEMA: N√∫mero de chaves diferente ap√≥s sanitiza√ß√£o');
  }
  
  // Verificar se h√° algum problema com valores espec√≠ficos
  console.log('\nüîç Verifica√ß√£o de valores espec√≠ficos:');
  console.log(`   number √© string? ${typeof sanitizedPayload.number === 'string'}`);
  console.log(`   number tem conte√∫do? ${sanitizedPayload.number && sanitizedPayload.number.length > 0}`);
  console.log(`   contactId √© string? ${typeof sanitizedPayload.contactId === 'string'}`);
  console.log(`   contactId tem conte√∫do? ${sanitizedPayload.contactId && sanitizedPayload.contactId.length > 0}`);
  
  // Verificar se o number cont√©m um ID MongoDB
  if (sanitizedPayload.number && sanitizedPayload.number.match(/^[a-f0-9]{24}$/)) {
    console.log('‚ùå PROBLEMA CR√çTICO: O campo number cont√©m um ID MongoDB!');
    console.log('   Isso explicaria o erro "INVALID_WA_NUMBER"');
  }
  
  // Verificar se o contactId cont√©m um n√∫mero de telefone
  if (sanitizedPayload.contactId && sanitizedPayload.contactId.match(/^\d+$/)) {
    console.log('‚ùå PROBLEMA CR√çTICO: O campo contactId cont√©m um n√∫mero de telefone!');
  }
}

/**
 * Testa com diferentes implementa√ß√µes de sanitiza√ß√£o
 */
function testDifferentSanitizationApproaches() {
  console.log('\nüß™ Testando diferentes abordagens de sanitiza√ß√£o...');
  
  const testPayload = {
    number: '16981892476',
    contactId: '68c8490b633da7451787ba9d',
    templateId: '6878d983011d14f8e3ed6771',
    templateComponents: [],
    forceSend: true,
    verifyContact: true
  };
  
  // Abordagem 1: Sanitiza√ß√£o normal
  console.log('\nüìã Abordagem 1: Sanitiza√ß√£o normal');
  const sanitized1 = sanitizeData(testPayload);
  console.log(`   number: "${sanitized1.number}"`);
  console.log(`   contactId: "${sanitized1.contactId}"`);
  
  // Abordagem 2: Sem sanitiza√ß√£o
  console.log('\nüìã Abordagem 2: Sem sanitiza√ß√£o');
  const sanitized2 = testPayload; // Sem sanitiza√ß√£o
  console.log(`   number: "${sanitized2.number}"`);
  console.log(`   contactId: "${sanitized2.contactId}"`);
  
  // Abordagem 3: Sanitiza√ß√£o manual
  console.log('\nüìã Abordagem 3: Sanitiza√ß√£o manual');
  const sanitized3 = {
    number: testPayload.number.toString().trim(),
    contactId: testPayload.contactId.toString().trim(),
    templateId: testPayload.templateId.toString().trim(),
    templateComponents: testPayload.templateComponents,
    forceSend: testPayload.forceSend,
    verifyContact: testPayload.verifyContact
  };
  console.log(`   number: "${sanitized3.number}"`);
  console.log(`   contactId: "${sanitized3.contactId}"`);
}

// Executar testes se este arquivo for executado diretamente
if (require.main === module) {
  testSanitizeBug();
  testDifferentSanitizationApproaches();
}

module.exports = {
  testSanitizeBug,
  testDifferentSanitizationApproaches
};

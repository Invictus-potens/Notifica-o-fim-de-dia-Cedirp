/**
 * Script de teste espec√≠fico para validar o layout da se√ß√£o de configura√ß√µes
 * Este script verifica se a estrutura HTML da se√ß√£o configuracoes-route
 * est√° correta para exibir os cards lado a lado.
 */

const fs = require('fs');
const path = require('path');

class ConfigLayoutTest {
    constructor() {
        this.testResults = [];
        this.configSection = '';
    }

    async runTests() {
        console.log('üß™ Iniciando testes espec√≠ficos de layout da se√ß√£o de configura√ß√µes...\n');

        await this.loadConfigSection();
        
        // Teste 1: Verificar estrutura b√°sica
        await this.testBasicStructure();
        
        // Teste 2: Verificar layout lado a lado
        await this.testSideBySideLayout();
        
        // Teste 3: Verificar conte√∫do dos cards
        await this.testCardContent();

        this.printResults();
    }

    async loadConfigSection() {
        try {
            const htmlPath = path.join(__dirname, '../public/index.html');
            const htmlContent = fs.readFileSync(htmlPath, 'utf8');
            
            // Extrair apenas a se√ß√£o de configura√ß√µes
            const startIndex = htmlContent.indexOf('<div id="configuracoes-route" class="route-content">');
            const endIndex = htmlContent.indexOf('<!-- Logs Route -->', startIndex);
            
            if (startIndex === -1) {
                throw new Error('Se√ß√£o configuracoes-route n√£o encontrada');
            }
            
            if (endIndex === -1) {
                // Se n√£o encontrar o pr√≥ximo coment√°rio, pegar at√© o final do arquivo
                this.configSection = htmlContent.substring(startIndex);
            } else {
                this.configSection = htmlContent.substring(startIndex, endIndex);
            }
            
            console.log('‚úÖ Se√ß√£o de configura√ß√µes extra√≠da com sucesso');
            console.log(`üìè Tamanho da se√ß√£o: ${this.configSection.length} caracteres`);
        } catch (error) {
            console.error('‚ùå Erro ao carregar se√ß√£o de configura√ß√µes:', error.message);
            this.addTestResult('Section Loading', 'Carregar se√ß√£o de configura√ß√µes', false, 'Sucesso', error.message);
        }
    }

    async testBasicStructure() {
        console.log('üèóÔ∏è Teste 1: Estrutura B√°sica');
        
        const tests = [
            {
                name: 'Se√ß√£o configuracoes-route existe',
                expected: true,
                actual: this.configSection.includes('<div id="configuracoes-route" class="route-content">'),
                pass: this.configSection.includes('<div id="configuracoes-route" class="route-content">')
            },
            {
                name: 'Row container existe',
                expected: true,
                actual: this.configSection.includes('<div class="row">'),
                pass: this.configSection.includes('<div class="row">')
            },
            {
                name: 'Row est√° fechada corretamente',
                expected: true,
                actual: this.countOccurrences('<div class="row">') === this.countOccurrences('</div>', this.findRowEnd()),
                pass: this.countOccurrences('<div class="row">') <= this.countOccurrences('</div>')
            }
        ];

        tests.forEach(test => {
            this.addTestResult('Basic Structure', test.name, test.pass, test.expected, test.actual);
        });

        console.log('‚úÖ Teste 1 conclu√≠do\n');
    }

    async testSideBySideLayout() {
        console.log('üìê Teste 2: Layout Lado a Lado');
        
        // Contar col-md-6 apenas na se√ß√£o de configura√ß√µes
        const colMd6Count = this.countOccurrences('<div class="col-md-6">');
        
        const tests = [
            {
                name: 'Existem exatamente 2 colunas col-md-6 na se√ß√£o',
                expected: 2,
                actual: colMd6Count,
                pass: colMd6Count === 2
            },
            {
                name: 'Primeira coluna tem coment√°rio "Exception Lists"',
                expected: true,
                actual: this.configSection.includes('<!-- Exception Lists -->'),
                pass: this.configSection.includes('<!-- Exception Lists -->')
            },
            {
                name: 'Segunda coluna tem coment√°rio "Message Configuration"',
                expected: true,
                actual: this.configSection.includes('<!-- Message Configuration -->'),
                pass: this.configSection.includes('<!-- Message Configuration -->')
            },
            {
                name: 'Ordem dos coment√°rios est√° correta',
                expected: true,
                actual: this.configSection.indexOf('<!-- Exception Lists -->') < this.configSection.indexOf('<!-- Message Configuration -->'),
                pass: this.configSection.indexOf('<!-- Exception Lists -->') < this.configSection.indexOf('<!-- Message Configuration -->')
            }
        ];

        tests.forEach(test => {
            this.addTestResult('Side by Side Layout', test.name, test.pass, test.expected, test.actual);
        });

        console.log('‚úÖ Teste 2 conclu√≠do\n');
    }

    async testCardContent() {
        console.log('üÉè Teste 3: Conte√∫do dos Cards');
        
        const tests = [
            {
                name: 'Card "Listas de Exce√ß√£o" existe',
                expected: true,
                actual: this.configSection.includes('Listas de Exce√ß√£o'),
                pass: this.configSection.includes('Listas de Exce√ß√£o')
            },
            {
                name: 'Card "Configura√ß√£o de Mensagens" existe',
                expected: true,
                actual: this.configSection.includes('Configura√ß√£o de Mensagens'),
                pass: this.configSection.includes('Configura√ß√£o de Mensagens')
            },
            {
                name: 'Ambos os cards t√™m estrutura completa',
                expected: true,
                actual: this.configSection.includes('<div class="card mb-4">') && 
                        this.configSection.includes('<div class="card-header">') &&
                        this.configSection.includes('<div class="card-body">'),
                pass: this.configSection.includes('<div class="card mb-4">') && 
                      this.configSection.includes('<div class="card-header">') &&
                      this.configSection.includes('<div class="card-body">')
            },
            {
                name: 'Card de setores exclu√≠dos tem conte√∫do',
                expected: true,
                actual: this.configSection.includes('Setores Exclu√≠dos') && 
                        this.configSection.includes('sector-select'),
                pass: this.configSection.includes('Setores Exclu√≠dos') && 
                      this.configSection.includes('sector-select')
            },
            {
                name: 'Card de mensagens tem action cards',
                expected: true,
                actual: this.configSection.includes('action-card-30min-select') && 
                        this.configSection.includes('action-card-endday-select'),
                pass: this.configSection.includes('action-card-30min-select') && 
                      this.configSection.includes('action-card-endday-select')
            }
        ];

        tests.forEach(test => {
            this.addTestResult('Card Content', test.name, test.pass, test.expected, test.actual);
        });

        console.log('‚úÖ Teste 3 conclu√≠do\n');
    }

    countOccurrences(substring) {
        return (this.configSection.match(new RegExp(substring.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g')) || []).length;
    }

    findRowEnd() {
        const rowStart = this.configSection.indexOf('<div class="row">');
        if (rowStart === -1) return -1;
        
        let depth = 0;
        let index = rowStart;
        
        while (index < this.configSection.length) {
            if (this.configSection.substr(index, 4) === '<div') {
                depth++;
            } else if (this.configSection.substr(index, 6) === '</div>') {
                depth--;
                if (depth === 0) {
                    return index;
                }
            }
            index++;
        }
        
        return -1;
    }

    addTestResult(category, testName, pass, expected, actual) {
        this.testResults.push({
            category,
            testName,
            pass,
            expected,
            actual
        });
    }

    printResults() {
        console.log('üìä RESULTADOS DOS TESTES DE LAYOUT DE CONFIGURA√á√ïES\n');
        console.log('='.repeat(80));

        const categories = [...new Set(this.testResults.map(r => r.category))];
        
        categories.forEach(category => {
            console.log(`\nüìÇ ${category}:`);
            console.log('-'.repeat(50));
            
            const categoryTests = this.testResults.filter(r => r.category === category);
            
            categoryTests.forEach(test => {
                const status = test.pass ? '‚úÖ PASSOU' : '‚ùå FALHOU';
                console.log(`${status} ${test.testName}`);
                if (!test.pass) {
                    console.log(`   Esperado: ${test.expected}`);
                    console.log(`   Obtido: ${test.actual}`);
                }
            });
        });

        const totalTests = this.testResults.length;
        const passedTests = this.testResults.filter(r => r.pass).length;
        const failedTests = totalTests - passedTests;

        console.log('\n' + '='.repeat(80));
        console.log(`üìà RESUMO: ${passedTests}/${totalTests} testes passaram`);
        
        if (failedTests > 0) {
            console.log(`‚ùå ${failedTests} testes falharam`);
            console.log('‚ö†Ô∏è O layout da se√ß√£o de configura√ß√µes pode n√£o estar correto!');
        } else {
            console.log('üéâ Todos os testes passaram! O layout lado a lado est√° perfeito!');
            console.log('‚ú® Os cards "Listas de Exce√ß√£o" e "Configura√ß√£o de Mensagens" est√£o lado a lado!');
            console.log('üíñ A interface est√° organizada e funcional!');
        }
    }
}

// Executar testes se o script for chamado diretamente
if (require.main === module) {
    const tester = new ConfigLayoutTest();
    tester.runTests().catch(console.error);
}

module.exports = { ConfigLayoutTest };

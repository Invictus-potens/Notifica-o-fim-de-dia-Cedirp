/**
 * Teste completo do sistema de mensagens
 * Verifica se o envio de mensagens de 30min e fim de expediente est√° 100% funcional
 */

const { MainController } = require('./src/controllers/MainController');
const { MonitoringService } = require('./src/services/MonitoringService');
const { ConfigManager } = require('./src/services/ConfigManager');
const { ErrorHandler } = require('./src/services/ErrorHandler');

async function testCompleteMessaging() {
    console.log('üß™ TESTE COMPLETO: Sistema de Mensagens\n');
    console.log('=' .repeat(60));
    
    try {
        // 1. Inicializar sistema
        console.log('\nüìã 1. INICIALIZANDO SISTEMA...');
        const mainController = new MainController();
        await mainController.initialize();
        console.log('‚úÖ Sistema inicializado com sucesso');
        
        // 2. Verificar configura√ß√µes
        console.log('\nüìã 2. VERIFICANDO CONFIGURA√á√ïES...');
        const errorHandler = new ErrorHandler();
        const configManager = new ConfigManager(errorHandler);
        await configManager.initialize();
        
        const minWaitTime = configManager.getMinWaitTime();
        const maxWaitTime = configManager.getMaxWaitTime();
        const ignoreBusinessHours = configManager.shouldIgnoreBusinessHours();
        const endOfDayPaused = configManager.isEndOfDayPaused();
        const endOfDayTime = configManager.getEndOfDayTime();
        
        console.log(`   ‚è∞ Tempo m√≠nimo: ${minWaitTime} minutos`);
        console.log(`   ‚è∞ Tempo m√°ximo: ${maxWaitTime} minutos`);
        console.log(`   üïê Ignorar hor√°rio comercial: ${ignoreBusinessHours}`);
        console.log(`   üö´ Fim de dia pausado: ${endOfDayPaused}`);
        console.log(`   üïê Hor√°rio de fim de dia: ${endOfDayTime}`);
        
        // 3. Verificar Action Cards
        console.log('\nüìã 3. VERIFICANDO ACTION CARDS...');
        const actionCard30Min = configManager.getActionCardId('30min');
        const actionCardEndDay = configManager.getActionCardId('fim_dia');
        
        console.log(`   üì± Action Card 30min: ${actionCard30Min ? 'CONFIGURADO' : 'N√ÉO CONFIGURADO'}`);
        console.log(`   üì± Action Card fim dia: ${actionCardEndDay ? 'CONFIGURADO' : 'N√ÉO CONFIGURADO'}`);
        
        // 4. Criar pacientes de teste
        console.log('\nüìã 4. CRIANDO PACIENTES DE TESTE...');
        
        const patient30Min = {
            id: 'test-30min-' + Date.now(),
            name: 'Paciente Teste 30min',
            phone: '16981892476', // N√∫mero real para teste
            waitTimeMinutes: 35,
            sectorId: 'test-sector',
            channelId: 'test-channel-1',
            waitStartTime: new Date(Date.now() - 35 * 60 * 1000)
        };
        
        const patientEndDay = {
            id: 'test-endday-' + Date.now(),
            name: 'Paciente Teste Fim Dia',
            phone: '16981892476', // N√∫mero real para teste
            waitTimeMinutes: 120,
            sectorId: 'test-sector',
            channelId: 'test-channel-2',
            waitStartTime: new Date(Date.now() - 120 * 60 * 1000)
        };
        
        console.log(`   üë§ Paciente 30min: ${patient30Min.name} (Canal: ${patient30Min.channelId})`);
        console.log(`   üë§ Paciente fim dia: ${patientEndDay.name} (Canal: ${patientEndDay.channelId})`);
        
        // 5. Verificar elegibilidade
        console.log('\nüìã 5. VERIFICANDO ELEGIBILIDADE...');
        const monitoringService = new MonitoringService(errorHandler, configManager);
        
        const eligible30Min = await monitoringService.isPatientEligibleFor30MinMessage(patient30Min);
        const eligibleEndDay = await monitoringService.isPatientEligibleForEndOfDayMessage(patientEndDay);
        
        console.log(`   ‚úÖ Eleg√≠vel 30min: ${eligible30Min ? 'SIM' : 'N√ÉO'}`);
        console.log(`   ‚úÖ Eleg√≠vel fim dia: ${eligibleEndDay ? 'SIM' : 'N√ÉO'}`);
        
        // 6. Testar APIs de envio
        console.log('\nüìã 6. TESTANDO APIs DE ENVIO...');
        
        // Teste 30min
        console.log('\n   üß™ Testando envio de 30min...');
        try {
            const response30Min = await fetch('http://localhost:3000/api/messages/send-action-card', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    patients: [patient30Min],
                    action_card_id: actionCard30Min,
                    channelId: patient30Min.channelId
                })
            });
            
            const result30Min = await response30Min.json();
            console.log(`   üì§ API 30min: ${response30Min.ok ? 'FUNCIONANDO' : 'ERRO'}`);
            if (!response30Min.ok) {
                console.log(`   ‚ùå Erro: ${result30Min.error}`);
            }
        } catch (error) {
            console.log(`   ‚ö†Ô∏è API 30min: Servidor n√£o dispon√≠vel - ${error.message}`);
        }
        
        // Teste fim de dia
        console.log('\n   üß™ Testando envio de fim de dia...');
        try {
            const responseEndDay = await fetch('http://localhost:3000/api/messages/send-action-card', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    patients: [patientEndDay],
                    action_card_id: actionCardEndDay,
                    channelId: patientEndDay.channelId
                })
            });
            
            const resultEndDay = await responseEndDay.json();
            console.log(`   üì§ API fim dia: ${responseEndDay.ok ? 'FUNCIONANDO' : 'ERRO'}`);
            if (!responseEndDay.ok) {
                console.log(`   ‚ùå Erro: ${resultEndDay.error}`);
            }
        } catch (error) {
            console.log(`   ‚ö†Ô∏è API fim dia: Servidor n√£o dispon√≠vel - ${error.message}`);
        }
        
        // 7. Verificar hist√≥rico
        console.log('\nüìã 7. VERIFICANDO HIST√ìRICO...');
        try {
            const historyResponse = await fetch('http://localhost:3000/api/messages/history');
            const historyResult = await historyResponse.json();
            console.log(`   üìö Hist√≥rico: ${historyResponse.ok ? 'ACESS√çVEL' : 'ERRO'}`);
            if (historyResponse.ok) {
                console.log(`   üìä Total de mensagens: ${historyResult.data?.length || 0}`);
            }
        } catch (error) {
            console.log(`   ‚ö†Ô∏è Hist√≥rico: Erro - ${error.message}`);
        }
        
        // 8. Verificar jobs de cron
        console.log('\nüìã 8. VERIFICANDO JOBS DE CRON...');
        const fs = require('fs');
        const cronContent = fs.readFileSync('./src/services/CronService.js', 'utf8');
        
        const hasPatientCheck = cronContent.includes('patientCheck');
        const hasIntensiveCheck = cronContent.includes('intensivePatientCheck');
        const hasEndOfDay = cronContent.includes('endOfDayMessages');
        
        console.log(`   ‚è∞ Job verifica√ß√£o pacientes: ${hasPatientCheck ? 'CONFIGURADO' : 'N√ÉO CONFIGURADO'}`);
        console.log(`   ‚è∞ Job verifica√ß√£o intensiva: ${hasIntensiveCheck ? 'CONFIGURADO' : 'N√ÉO CONFIGURADO'}`);
        console.log(`   ‚è∞ Job fim de dia: ${hasEndOfDay ? 'CONFIGURADO' : 'N√ÉO CONFIGURADO'}`);
        
        // 9. Resumo final
        console.log('\n' + '=' .repeat(60));
        console.log('üìä RESUMO FINAL DO TESTE');
        console.log('=' .repeat(60));
        
        const checks = [
            { name: 'Sistema inicializado', status: true },
            { name: 'Configura√ß√µes carregadas', status: true },
            { name: 'Action Card 30min', status: !!actionCard30Min },
            { name: 'Action Card fim dia', status: !!actionCardEndDay },
            { name: 'Paciente eleg√≠vel 30min', status: eligible30Min },
            { name: 'Paciente eleg√≠vel fim dia', status: eligibleEndDay },
            { name: 'Job verifica√ß√£o pacientes', status: hasPatientCheck },
            { name: 'Job fim de dia', status: hasEndOfDay }
        ];
        
        const passedChecks = checks.filter(check => check.status).length;
        const totalChecks = checks.length;
        
        console.log('\nüìã VERIFICA√á√ïES:');
        checks.forEach(check => {
            console.log(`   ${check.status ? '‚úÖ' : '‚ùå'} ${check.name}`);
        });
        
        console.log(`\nüìä RESULTADO: ${passedChecks}/${totalChecks} verifica√ß√µes passaram`);
        
        if (passedChecks === totalChecks) {
            console.log('\nüéâ SISTEMA 100% FUNCIONAL!');
            console.log('‚úÖ Envio de mensagens de 30min: FUNCIONAL');
            console.log('‚úÖ Envio de mensagens de fim de expediente: FUNCIONAL');
            console.log('‚úÖ Voc√™ pode confiar 100% no sistema!');
        } else {
            console.log('\n‚ö†Ô∏è SISTEMA COM PROBLEMAS!');
            console.log('‚ùå Algumas funcionalidades precisam ser corrigidas');
            console.log('\nüîß A√á√ïES NECESS√ÅRIAS:');
            if (!actionCard30Min) console.log('   - Configurar Action Card para 30min');
            if (!actionCardEndDay) console.log('   - Configurar Action Card para fim de dia');
            if (!eligible30Min) console.log('   - Verificar configura√ß√µes de elegibilidade 30min');
            if (!eligibleEndDay) console.log('   - Verificar configura√ß√µes de elegibilidade fim de dia');
            if (!hasPatientCheck) console.log('   - Verificar job de verifica√ß√£o de pacientes');
            if (!hasEndOfDay) console.log('   - Verificar job de fim de dia');
        }
        
        console.log('\n' + '=' .repeat(60));
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error.message);
        console.error('Stack trace:', error.stack);
    }
}

// Executar teste
testCompleteMessaging();
